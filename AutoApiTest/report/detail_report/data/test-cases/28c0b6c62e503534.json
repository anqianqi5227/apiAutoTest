{
  "uid" : "28c0b6c62e503534",
  "name" : "test_case[case_data0]",
  "fullName" : "tests.TestScript.homeindexApi.test_homeindex.TestHomeindex#test_case",
  "historyId" : "e2b7ea7953be350cb5528045cd1d45fa",
  "time" : {
    "start" : 1617631088164,
    "stop" : 1617631088313,
    "duration" : 149
  },
  "status" : "broken",
  "statusMessage" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
  "statusTrace" : "self = <test_homeindex.TestHomeindex object at 0x12354b358>\ncase_data = {'case_id': 1, 'check': {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"ret\": 0']}, 'cookies': True, 'global_relevance': None, ...}\nsetupClass = {}\n\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"product_version\"] in product_version,\n                        reason=\"该用例所属版本为：{0}，在本次排除版本{1}内\".format(case_dict[\"test_info\"][\"product_version\"],\n                                                                 product_version))\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"case_level\"] not in case_level,\n                        reason=\"该用例的用例等级为：{0}，不在本次运行级别{1}内\".format(case_dict[\"test_info\"][\"case_level\"], case_level))\n    # @pytest.mark.run(order=case_dict[\"test_info\"][\"run_order\"])\n    @allure.severity(case_dict[\"test_info\"][\"case_level\"])\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"homeindex\")\n    def test_case(self, case_data, setupClass):\n        self.relevance = setupTest(relevance_path, case_data, setupClass)\n>       api_send_check(case_data, case_dict, case_path, self.relevance)\n\n/Users/nali/AutoApiTest/tests/TestScript/homeindexApi/test_homeindex.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/nali/AutoApiTest/common/unit/api_send_check.py:33: in api_send_check\n    check_result.check_result(test_name, check_data, code, data, case_path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_name = 'homeindex_1'\ncase = {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"ret\": 0']}\ncode = 200, data = {'data': {}, 'msg': '未登录', 'ret': -10}\n_path = '/Users/nali/AutoApiTest/tests/TestCases/homeindexApi'\nrelevance = {'corpCode': 'p1u5Es8yX98', 'corpId': 43, 'uid': 239283, 'uidCode': '_GAQsTvZuwo'}\n\n    def check_result(test_name, case, code, data, _path, relevance=None):\n        \"\"\"\n        校验测试结果\n        :param test_name: 测试名称\n        :param case: 测试用例中check字段，默认为dict\n        :param code: HTTP状态\n        :param data: 返回的接口json数据\n        :param relevance: 关联值对象\n        :param _path: case路径\n        :return:\n        \"\"\"\n        # 不校验结果\n        print(case[\"check_type\"])\n        if case[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n    \n        # json格式校验\n        elif case[\"check_type\"] == 'json':\n            expected_result = case[\"expected_result\"]\n            if isinstance(case[\"expected_result\"], str):\n                expected_result = read_param(test_name, expected_result, _path, relevance)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(expected_result), '期望data')\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if int(code) == case[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                check_json(expected_result, data)\n            else:\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 只校验状态码\n        elif case[\"check_type\"] == 'only_check_status':\n            with allure.step(\"校验HTTP状态\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if code == case[\"expected_code\"]:\n                pass\n            else:\n                print(code)\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 完全校验\n        # elif case[\"check_type\"] == 'entirely_check':\n        #     expected_result = case[\"expected_result\"]\n        #     if isinstance(case[\"expected_result\"], str):\n        #         expected_result = read_json(test_name, expected_result, _path, relevance)\n        #     # with allure.step(\"完全校验结果\"):\n        #     #     allure.attach(\"期望code\", str(case[\"expected_code\"]))\n        #     #     allure.attach('期望data', str(expected_result))\n        #     #     allure.attach(\"实际code\", str(code))\n        #     #     allure.attach('实际data', str(data.yaml))\n        #     if int(code) == case[\"expected_code\"]:\n        #         result = operator.eq(expected_result, data.yaml)\n        #         if result:\n        #             pass\n        #         else:\n        #             raise Exception(\"完全校验失败！ {0} ! = {1}\".format(expected_result, data.yaml))\n        #     else:\n        #         raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 正则校验\n        elif case[\"check_type\"] == 'Regular_check':\n            if int(code) == case[\"expected_code\"]:\n                try:\n                    result = \"\"\n                    if isinstance(case[\"expected_result\"], list):\n                        with allure.step(\"正则校验\"):\n                            for i in case[\"expected_result\"]:\n                                # 替换用例中关联关系\n                                re_i = single_replace(i, relevance)\n                                result = re.findall(re_i.replace(\"\\\"\", \"\\'\"), str(data))\n                                allure.attach(str(result),'正则校验结果\\n')\n                            allure.attach(str(data),'实际data')\n                    else:\n                        result = re.findall(case[\"expected_result\"].replace(\"\\\"\", \"\\'\"), str(data))\n                        with allure.step(\"正则校验\"):\n                            allure.attach(\"期望code\", str(case[\"expected_code\"]))\n                            allure.attach('正则表达式', str(case[\"expected_result\"]).replace(\"\\'\", \"\\\"\"))\n                            allure.attach(\"实际code\", str(code))\n                            allure.attach('实际data', str(data))\n                            allure.attach(case[\"expected_result\"].replace(\"\\\"\", \"\\'\") + '校验完成结果',\n                                          str(result).replace(\"\\'\", \"\\\"\"))\n                    if not result:\n>                       raise Exception(\"正则未校验到内容！ {}\".format(case[\"expected_result\"]))\nE                       Exception: 正则未校验到内容！ ['\"ret\": 0']\n\n/Users/nali/AutoApiTest/common/unit/check_result.py:118: Exception",
  "flaky" : true,
  "beforeStages" : [ {
    "name" : "setupClass",
    "time" : {
      "start" : 1617631088146,
      "stop" : 1617631088147,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
    "statusTrace" : "self = <test_homeindex.TestHomeindex object at 0x12354b358>\ncase_data = {'case_id': 1, 'check': {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"ret\": 0']}, 'cookies': True, 'global_relevance': None, ...}\nsetupClass = {}\n\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"product_version\"] in product_version,\n                        reason=\"该用例所属版本为：{0}，在本次排除版本{1}内\".format(case_dict[\"test_info\"][\"product_version\"],\n                                                                 product_version))\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"case_level\"] not in case_level,\n                        reason=\"该用例的用例等级为：{0}，不在本次运行级别{1}内\".format(case_dict[\"test_info\"][\"case_level\"], case_level))\n    # @pytest.mark.run(order=case_dict[\"test_info\"][\"run_order\"])\n    @allure.severity(case_dict[\"test_info\"][\"case_level\"])\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"homeindex\")\n    def test_case(self, case_data, setupClass):\n        self.relevance = setupTest(relevance_path, case_data, setupClass)\n>       api_send_check(case_data, case_dict, case_path, self.relevance)\n\n/Users/nali/AutoApiTest/tests/TestScript/homeindexApi/test_homeindex.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/nali/AutoApiTest/common/unit/api_send_check.py:33: in api_send_check\n    check_result.check_result(test_name, check_data, code, data, case_path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_name = 'homeindex_1'\ncase = {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"ret\": 0']}\ncode = 200, data = {'data': {}, 'msg': '未登录', 'ret': -10}\n_path = '/Users/nali/AutoApiTest/tests/TestCases/homeindexApi'\nrelevance = {'corpCode': 'p1u5Es8yX98', 'corpId': 43, 'uid': 239283, 'uidCode': '_GAQsTvZuwo'}\n\n    def check_result(test_name, case, code, data, _path, relevance=None):\n        \"\"\"\n        校验测试结果\n        :param test_name: 测试名称\n        :param case: 测试用例中check字段，默认为dict\n        :param code: HTTP状态\n        :param data: 返回的接口json数据\n        :param relevance: 关联值对象\n        :param _path: case路径\n        :return:\n        \"\"\"\n        # 不校验结果\n        print(case[\"check_type\"])\n        if case[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n    \n        # json格式校验\n        elif case[\"check_type\"] == 'json':\n            expected_result = case[\"expected_result\"]\n            if isinstance(case[\"expected_result\"], str):\n                expected_result = read_param(test_name, expected_result, _path, relevance)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(expected_result), '期望data')\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if int(code) == case[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                check_json(expected_result, data)\n            else:\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 只校验状态码\n        elif case[\"check_type\"] == 'only_check_status':\n            with allure.step(\"校验HTTP状态\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if code == case[\"expected_code\"]:\n                pass\n            else:\n                print(code)\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 完全校验\n        # elif case[\"check_type\"] == 'entirely_check':\n        #     expected_result = case[\"expected_result\"]\n        #     if isinstance(case[\"expected_result\"], str):\n        #         expected_result = read_json(test_name, expected_result, _path, relevance)\n        #     # with allure.step(\"完全校验结果\"):\n        #     #     allure.attach(\"期望code\", str(case[\"expected_code\"]))\n        #     #     allure.attach('期望data', str(expected_result))\n        #     #     allure.attach(\"实际code\", str(code))\n        #     #     allure.attach('实际data', str(data.yaml))\n        #     if int(code) == case[\"expected_code\"]:\n        #         result = operator.eq(expected_result, data.yaml)\n        #         if result:\n        #             pass\n        #         else:\n        #             raise Exception(\"完全校验失败！ {0} ! = {1}\".format(expected_result, data.yaml))\n        #     else:\n        #         raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 正则校验\n        elif case[\"check_type\"] == 'Regular_check':\n            if int(code) == case[\"expected_code\"]:\n                try:\n                    result = \"\"\n                    if isinstance(case[\"expected_result\"], list):\n                        with allure.step(\"正则校验\"):\n                            for i in case[\"expected_result\"]:\n                                # 替换用例中关联关系\n                                re_i = single_replace(i, relevance)\n                                result = re.findall(re_i.replace(\"\\\"\", \"\\'\"), str(data))\n                                allure.attach(str(result),'正则校验结果\\n')\n                            allure.attach(str(data),'实际data')\n                    else:\n                        result = re.findall(case[\"expected_result\"].replace(\"\\\"\", \"\\'\"), str(data))\n                        with allure.step(\"正则校验\"):\n                            allure.attach(\"期望code\", str(case[\"expected_code\"]))\n                            allure.attach('正则表达式', str(case[\"expected_result\"]).replace(\"\\'\", \"\\\"\"))\n                            allure.attach(\"实际code\", str(code))\n                            allure.attach('实际data', str(data))\n                            allure.attach(case[\"expected_result\"].replace(\"\\\"\", \"\\'\") + '校验完成结果',\n                                          str(result).replace(\"\\'\", \"\\\"\"))\n                    if not result:\n>                       raise Exception(\"正则未校验到内容！ {}\".format(case[\"expected_result\"]))\nE                       Exception: 正则未校验到内容！ ['\"ret\": 0']\n\n/Users/nali/AutoApiTest/common/unit/check_result.py:118: Exception",
    "steps" : [ {
      "name" : "get请求接口",
      "time" : {
        "start" : 1617631088169,
        "stop" : 1617631088171,
        "duration" : 2
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "7e5de03c1724e612",
        "name" : "请求接口：",
        "source" : "7e5de03c1724e612.attach",
        "type" : "text/plain",
        "size" : 11
      }, {
        "uid" : "6b86518f3db40a7e",
        "name" : "用例描述：",
        "source" : "6b86518f3db40a7e.attach",
        "type" : "text/plain",
        "size" : 24
      }, {
        "uid" : "4b2d1c4dedc341de",
        "name" : "请求地址",
        "source" : "4b2d1c4dedc341de.attach",
        "type" : "text/plain",
        "size" : 44
      }, {
        "uid" : "c260dba08f206751",
        "name" : "请求头",
        "source" : "c260dba08f206751.attach",
        "type" : "text/plain",
        "size" : 68
      }, {
        "uid" : "2a6776da35d2922a",
        "name" : "请求参数",
        "source" : "2a6776da35d2922a.attach",
        "type" : "text/plain",
        "size" : 4
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 5,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "正则校验",
      "time" : {
        "start" : 1617631088306,
        "stop" : 1617631088311,
        "duration" : 5
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "113c8993c56f9900",
        "name" : "正则校验结果\n",
        "source" : "113c8993c56f9900.attach",
        "type" : "text/plain",
        "size" : 2
      }, {
        "uid" : "ee28428487b8165",
        "name" : "实际data",
        "source" : "ee28428487b8165.attach",
        "type" : "text/plain",
        "size" : 44
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 2,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "1d01e51ea1452b6f",
      "name" : "log",
      "source" : "1d01e51ea1452b6f.txt",
      "type" : "text/plain",
      "size" : 154
    }, {
      "uid" : "ff6cd246a5ccb714",
      "name" : "stdout",
      "source" : "ff6cd246a5ccb714.txt",
      "type" : "text/plain",
      "size" : 247
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 9,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "homeindex"
  }, {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "feature",
    "value" : "homeindex"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.skipif(False, reason='该用例的用例等级为：blocker，不在本次运行级别['blocker', 'critical', 'normal', 'minor']内')"
  }, {
    "name" : "parentSuite",
    "value" : "tests.TestScript.homeindexApi"
  }, {
    "name" : "suite",
    "value" : "test_homeindex"
  }, {
    "name" : "subSuite",
    "value" : "TestHomeindex"
  }, {
    "name" : "host",
    "value" : "anqidediannao.local"
  }, {
    "name" : "thread",
    "value" : "10637-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.TestScript.homeindexApi.test_homeindex"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case_data",
    "value" : "{'test_name': 'homeindex_1', 'case_id': 1, 'is_run': None, 'info': '首页频道列表信息', 'parameter': None, 'cookies': True, 'timeout': 10, 'check': {'expected_result': ['\"ret\": 0'], 'check_type': 'Regular_check', 'expected_code': 200}, 'global_relevance': None, 'relevance': None}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "blocker",
    "retries" : [ {
      "uid" : "895d7f9c2ed47bd",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617630338350,
        "stop" : 1617630338531,
        "duration" : 181
      }
    }, {
      "uid" : "825f50c29957fbd9",
      "status" : "passed",
      "time" : {
        "start" : 1617629451917,
        "stop" : 1617629452242,
        "duration" : 325
      }
    }, {
      "uid" : "15184020219767ef",
      "status" : "passed",
      "time" : {
        "start" : 1617629114027,
        "stop" : 1617629114208,
        "duration" : 181
      }
    }, {
      "uid" : "a682b6ff98eeacd",
      "status" : "passed",
      "time" : {
        "start" : 1617626819797,
        "stop" : 1617626820019,
        "duration" : 222
      }
    }, {
      "uid" : "8b8d3fc1047b7def",
      "status" : "passed",
      "time" : {
        "start" : 1617614750177,
        "stop" : 1617614750334,
        "duration" : 157
      }
    }, {
      "uid" : "794a59ca5c50b5a5",
      "status" : "broken",
      "statusDetails" : "requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='m.test.qingxuetang.com', port=443): Max retries exceeded with url: /api/corp/home (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x113526978>, 'Connection to m.test.qingxuetang.com timed out. (connect timeout=10)'))",
      "time" : {
        "start" : 1617614490028,
        "stop" : 1617614500042,
        "duration" : 10014
      }
    }, {
      "uid" : "6069e6321cf77e88",
      "status" : "passed",
      "time" : {
        "start" : 1617614384158,
        "stop" : 1617614384526,
        "duration" : 368
      }
    }, {
      "uid" : "853e01eb024372a9",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617614250311,
        "stop" : 1617614250435,
        "duration" : 124
      }
    }, {
      "uid" : "9aa14fa99106ece0",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617613598354,
        "stop" : 1617613598487,
        "duration" : 133
      }
    }, {
      "uid" : "1be4c613b3d3e173",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617612171779,
        "stop" : 1617612171903,
        "duration" : 124
      }
    }, {
      "uid" : "d8cca389888ca0ab",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617612037757,
        "stop" : 1617612037904,
        "duration" : 147
      }
    }, {
      "uid" : "9dd9b25a0dac3bd8",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617612006552,
        "stop" : 1617612006692,
        "duration" : 140
      }
    }, {
      "uid" : "b7bdfa5a4951205c",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617611961461,
        "stop" : 1617611961572,
        "duration" : 111
      }
    }, {
      "uid" : "4bf77792d9d7af8",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617611931829,
        "stop" : 1617611931971,
        "duration" : 142
      }
    }, {
      "uid" : "db78a7cc0020f13b",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617611692588,
        "stop" : 1617611692685,
        "duration" : 97
      }
    }, {
      "uid" : "834413b3363566d3",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617611619907,
        "stop" : 1617611620076,
        "duration" : 169
      }
    }, {
      "uid" : "a5830d5f2223ee36",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617610942648,
        "stop" : 1617610942825,
        "duration" : 177
      }
    }, {
      "uid" : "fa999d3b9e51b735",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617610598093,
        "stop" : 1617610598226,
        "duration" : 133
      }
    }, {
      "uid" : "25fc2558649fb57b",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617609970926,
        "stop" : 1617609971063,
        "duration" : 137
      }
    }, {
      "uid" : "4dd73e7bef5a974c",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617609802820,
        "stop" : 1617609802963,
        "duration" : 143
      }
    }, {
      "uid" : "63ad4842b4fb5bb9",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617609723495,
        "stop" : 1617609723620,
        "duration" : 125
      }
    }, {
      "uid" : "d2398b6d5d3007f0",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617609377095,
        "stop" : 1617609377240,
        "duration" : 145
      }
    }, {
      "uid" : "d04c9188fb937cbc",
      "status" : "broken",
      "statusDetails" : "TypeError: a bytes-like object is required, not 'NoneType'",
      "time" : {
        "start" : 1617608244160,
        "stop" : 1617608244164,
        "duration" : 4
      }
    }, {
      "uid" : "4c44304d8016064f",
      "status" : "broken",
      "statusDetails" : "TypeError: a bytes-like object is required, not 'NoneType'",
      "time" : {
        "start" : 1617608092966,
        "stop" : 1617608092972,
        "duration" : 6
      }
    }, {
      "uid" : "b83806ca35dd48dd",
      "status" : "broken",
      "statusDetails" : "TypeError: a bytes-like object is required, not 'NoneType'",
      "time" : {
        "start" : 1617607868959,
        "stop" : 1617607868964,
        "duration" : 5
      }
    }, {
      "uid" : "ea68c261b20170c0",
      "status" : "broken",
      "statusDetails" : "TypeError: a bytes-like object is required, not 'NoneType'",
      "time" : {
        "start" : 1617607102966,
        "stop" : 1617607102969,
        "duration" : 3
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "@pytest.mark.skipif(False, reason='该用例的用例等级为：blocker，不在本次运行级别['blocker', 'critical', 'normal', 'minor']内')" ]
  },
  "source" : "28c0b6c62e503534.json",
  "parameterValues" : [ "{'test_name': 'homeindex_1', 'case_id': 1, 'is_run': None, 'info': '首页频道列表信息', 'parameter': None, 'cookies': True, 'timeout': 10, 'check': {'expected_result': ['\"ret\": 0'], 'check_type': 'Regular_check', 'expected_code': 200}, 'global_relevance': None, 'relevance': None}" ]
}