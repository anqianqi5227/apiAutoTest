{
  "uid" : "3049a103d2cf6ee",
  "name" : "test_case[case_data0]",
  "fullName" : "tests.TestScript.configsmainApi.test_configsmain.TestConfigsmain#test_case",
  "historyId" : "6b8a88ec27cfece4a4af6d4e471fe067",
  "time" : {
    "start" : 1617631087579,
    "stop" : 1617631087723,
    "duration" : 144
  },
  "status" : "broken",
  "statusMessage" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
  "statusTrace" : "self = <test_configsmain.TestConfigsmain object at 0x1233ddd30>\ncase_data = {'case_id': 1, 'check': {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"ret\": 0']}, 'cookies': True, 'global_relevance': None, ...}\nsetupClass = {}\n\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"product_version\"] in product_version,\n                        reason=\"该用例所属版本为：{0}，在本次排除版本{1}内\".format(case_dict[\"test_info\"][\"product_version\"],\n                                                                 product_version))\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"case_level\"] not in case_level,\n                        reason=\"该用例的用例等级为：{0}，不在本次运行级别{1}内\".format(case_dict[\"test_info\"][\"case_level\"], case_level))\n    # @pytest.mark.run(order=case_dict[\"test_info\"][\"run_order\"])\n    @allure.severity(case_dict[\"test_info\"][\"case_level\"])\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"configsmain\")\n    def test_case(self, case_data, setupClass):\n        self.relevance = setupTest(relevance_path, case_data, setupClass)\n>       api_send_check(case_data, case_dict, case_path, self.relevance)\n\n/Users/nali/AutoApiTest/tests/TestScript/configsmainApi/test_configsmain.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/nali/AutoApiTest/common/unit/api_send_check.py:33: in api_send_check\n    check_result.check_result(test_name, check_data, code, data, case_path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_name = 'configsmain_1'\ncase = {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"ret\": 0']}\ncode = 200, data = {'data': {}, 'msg': '未登录', 'ret': -10}\n_path = '/Users/nali/AutoApiTest/tests/TestCases/configsmainApi'\nrelevance = {'corpCode': 'p1u5Es8yX98', 'corpId': 43, 'uid': 239283, 'uidCode': '_GAQsTvZuwo'}\n\n    def check_result(test_name, case, code, data, _path, relevance=None):\n        \"\"\"\n        校验测试结果\n        :param test_name: 测试名称\n        :param case: 测试用例中check字段，默认为dict\n        :param code: HTTP状态\n        :param data: 返回的接口json数据\n        :param relevance: 关联值对象\n        :param _path: case路径\n        :return:\n        \"\"\"\n        # 不校验结果\n        print(case[\"check_type\"])\n        if case[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n    \n        # json格式校验\n        elif case[\"check_type\"] == 'json':\n            expected_result = case[\"expected_result\"]\n            if isinstance(case[\"expected_result\"], str):\n                expected_result = read_param(test_name, expected_result, _path, relevance)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(expected_result), '期望data')\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if int(code) == case[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                check_json(expected_result, data)\n            else:\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 只校验状态码\n        elif case[\"check_type\"] == 'only_check_status':\n            with allure.step(\"校验HTTP状态\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if code == case[\"expected_code\"]:\n                pass\n            else:\n                print(code)\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 完全校验\n        # elif case[\"check_type\"] == 'entirely_check':\n        #     expected_result = case[\"expected_result\"]\n        #     if isinstance(case[\"expected_result\"], str):\n        #         expected_result = read_json(test_name, expected_result, _path, relevance)\n        #     # with allure.step(\"完全校验结果\"):\n        #     #     allure.attach(\"期望code\", str(case[\"expected_code\"]))\n        #     #     allure.attach('期望data', str(expected_result))\n        #     #     allure.attach(\"实际code\", str(code))\n        #     #     allure.attach('实际data', str(data.yaml))\n        #     if int(code) == case[\"expected_code\"]:\n        #         result = operator.eq(expected_result, data.yaml)\n        #         if result:\n        #             pass\n        #         else:\n        #             raise Exception(\"完全校验失败！ {0} ! = {1}\".format(expected_result, data.yaml))\n        #     else:\n        #         raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 正则校验\n        elif case[\"check_type\"] == 'Regular_check':\n            if int(code) == case[\"expected_code\"]:\n                try:\n                    result = \"\"\n                    if isinstance(case[\"expected_result\"], list):\n                        with allure.step(\"正则校验\"):\n                            for i in case[\"expected_result\"]:\n                                # 替换用例中关联关系\n                                re_i = single_replace(i, relevance)\n                                result = re.findall(re_i.replace(\"\\\"\", \"\\'\"), str(data))\n                                allure.attach(str(result),'正则校验结果\\n')\n                            allure.attach(str(data),'实际data')\n                    else:\n                        result = re.findall(case[\"expected_result\"].replace(\"\\\"\", \"\\'\"), str(data))\n                        with allure.step(\"正则校验\"):\n                            allure.attach(\"期望code\", str(case[\"expected_code\"]))\n                            allure.attach('正则表达式', str(case[\"expected_result\"]).replace(\"\\'\", \"\\\"\"))\n                            allure.attach(\"实际code\", str(code))\n                            allure.attach('实际data', str(data))\n                            allure.attach(case[\"expected_result\"].replace(\"\\\"\", \"\\'\") + '校验完成结果',\n                                          str(result).replace(\"\\'\", \"\\\"\"))\n                    if not result:\n>                       raise Exception(\"正则未校验到内容！ {}\".format(case[\"expected_result\"]))\nE                       Exception: 正则未校验到内容！ ['\"ret\": 0']\n\n/Users/nali/AutoApiTest/common/unit/check_result.py:118: Exception",
  "flaky" : true,
  "beforeStages" : [ {
    "name" : "setupClass",
    "time" : {
      "start" : 1617631087558,
      "stop" : 1617631087558,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
    "statusTrace" : "self = <test_configsmain.TestConfigsmain object at 0x1233ddd30>\ncase_data = {'case_id': 1, 'check': {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"ret\": 0']}, 'cookies': True, 'global_relevance': None, ...}\nsetupClass = {}\n\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"product_version\"] in product_version,\n                        reason=\"该用例所属版本为：{0}，在本次排除版本{1}内\".format(case_dict[\"test_info\"][\"product_version\"],\n                                                                 product_version))\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"case_level\"] not in case_level,\n                        reason=\"该用例的用例等级为：{0}，不在本次运行级别{1}内\".format(case_dict[\"test_info\"][\"case_level\"], case_level))\n    # @pytest.mark.run(order=case_dict[\"test_info\"][\"run_order\"])\n    @allure.severity(case_dict[\"test_info\"][\"case_level\"])\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"configsmain\")\n    def test_case(self, case_data, setupClass):\n        self.relevance = setupTest(relevance_path, case_data, setupClass)\n>       api_send_check(case_data, case_dict, case_path, self.relevance)\n\n/Users/nali/AutoApiTest/tests/TestScript/configsmainApi/test_configsmain.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/nali/AutoApiTest/common/unit/api_send_check.py:33: in api_send_check\n    check_result.check_result(test_name, check_data, code, data, case_path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_name = 'configsmain_1'\ncase = {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"ret\": 0']}\ncode = 200, data = {'data': {}, 'msg': '未登录', 'ret': -10}\n_path = '/Users/nali/AutoApiTest/tests/TestCases/configsmainApi'\nrelevance = {'corpCode': 'p1u5Es8yX98', 'corpId': 43, 'uid': 239283, 'uidCode': '_GAQsTvZuwo'}\n\n    def check_result(test_name, case, code, data, _path, relevance=None):\n        \"\"\"\n        校验测试结果\n        :param test_name: 测试名称\n        :param case: 测试用例中check字段，默认为dict\n        :param code: HTTP状态\n        :param data: 返回的接口json数据\n        :param relevance: 关联值对象\n        :param _path: case路径\n        :return:\n        \"\"\"\n        # 不校验结果\n        print(case[\"check_type\"])\n        if case[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n    \n        # json格式校验\n        elif case[\"check_type\"] == 'json':\n            expected_result = case[\"expected_result\"]\n            if isinstance(case[\"expected_result\"], str):\n                expected_result = read_param(test_name, expected_result, _path, relevance)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(expected_result), '期望data')\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if int(code) == case[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                check_json(expected_result, data)\n            else:\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 只校验状态码\n        elif case[\"check_type\"] == 'only_check_status':\n            with allure.step(\"校验HTTP状态\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if code == case[\"expected_code\"]:\n                pass\n            else:\n                print(code)\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 完全校验\n        # elif case[\"check_type\"] == 'entirely_check':\n        #     expected_result = case[\"expected_result\"]\n        #     if isinstance(case[\"expected_result\"], str):\n        #         expected_result = read_json(test_name, expected_result, _path, relevance)\n        #     # with allure.step(\"完全校验结果\"):\n        #     #     allure.attach(\"期望code\", str(case[\"expected_code\"]))\n        #     #     allure.attach('期望data', str(expected_result))\n        #     #     allure.attach(\"实际code\", str(code))\n        #     #     allure.attach('实际data', str(data.yaml))\n        #     if int(code) == case[\"expected_code\"]:\n        #         result = operator.eq(expected_result, data.yaml)\n        #         if result:\n        #             pass\n        #         else:\n        #             raise Exception(\"完全校验失败！ {0} ! = {1}\".format(expected_result, data.yaml))\n        #     else:\n        #         raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 正则校验\n        elif case[\"check_type\"] == 'Regular_check':\n            if int(code) == case[\"expected_code\"]:\n                try:\n                    result = \"\"\n                    if isinstance(case[\"expected_result\"], list):\n                        with allure.step(\"正则校验\"):\n                            for i in case[\"expected_result\"]:\n                                # 替换用例中关联关系\n                                re_i = single_replace(i, relevance)\n                                result = re.findall(re_i.replace(\"\\\"\", \"\\'\"), str(data))\n                                allure.attach(str(result),'正则校验结果\\n')\n                            allure.attach(str(data),'实际data')\n                    else:\n                        result = re.findall(case[\"expected_result\"].replace(\"\\\"\", \"\\'\"), str(data))\n                        with allure.step(\"正则校验\"):\n                            allure.attach(\"期望code\", str(case[\"expected_code\"]))\n                            allure.attach('正则表达式', str(case[\"expected_result\"]).replace(\"\\'\", \"\\\"\"))\n                            allure.attach(\"实际code\", str(code))\n                            allure.attach('实际data', str(data))\n                            allure.attach(case[\"expected_result\"].replace(\"\\\"\", \"\\'\") + '校验完成结果',\n                                          str(result).replace(\"\\'\", \"\\\"\"))\n                    if not result:\n>                       raise Exception(\"正则未校验到内容！ {}\".format(case[\"expected_result\"]))\nE                       Exception: 正则未校验到内容！ ['\"ret\": 0']\n\n/Users/nali/AutoApiTest/common/unit/check_result.py:118: Exception",
    "steps" : [ {
      "name" : "get请求接口",
      "time" : {
        "start" : 1617631087583,
        "stop" : 1617631087585,
        "duration" : 2
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "4c19e1618aa581b3",
        "name" : "请求接口：",
        "source" : "4c19e1618aa581b3.attach",
        "type" : "text/plain",
        "size" : 13
      }, {
        "uid" : "ec889f114c20ed96",
        "name" : "用例描述：",
        "source" : "ec889f114c20ed96.attach",
        "type" : "text/plain",
        "size" : 11
      }, {
        "uid" : "af0f365f0a7bf7ef",
        "name" : "请求地址",
        "source" : "af0f365f0a7bf7ef.attach",
        "type" : "text/plain",
        "size" : 48
      }, {
        "uid" : "3e7bea3510933c3d",
        "name" : "请求头",
        "source" : "3e7bea3510933c3d.attach",
        "type" : "text/plain",
        "size" : 68
      }, {
        "uid" : "f0918579e4f44c1b",
        "name" : "请求参数",
        "source" : "f0918579e4f44c1b.attach",
        "type" : "text/plain",
        "size" : 4
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 5,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "正则校验",
      "time" : {
        "start" : 1617631087721,
        "stop" : 1617631087722,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "59040784f9503f90",
        "name" : "正则校验结果\n",
        "source" : "59040784f9503f90.attach",
        "type" : "text/plain",
        "size" : 2
      }, {
        "uid" : "933d8649724c4701",
        "name" : "实际data",
        "source" : "933d8649724c4701.attach",
        "type" : "text/plain",
        "size" : 44
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 2,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "6f2ebe524c23276",
      "name" : "log",
      "source" : "6f2ebe524c23276.txt",
      "type" : "text/plain",
      "size" : 154
    }, {
      "uid" : "fc253d6a41be5077",
      "name" : "stdout",
      "source" : "fc253d6a41be5077.txt",
      "type" : "text/plain",
      "size" : 251
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 9,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "configsmain"
  }, {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "feature",
    "value" : "configsmain"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.skipif(False, reason='该用例的用例等级为：blocker，不在本次运行级别['blocker', 'critical', 'normal', 'minor']内')"
  }, {
    "name" : "parentSuite",
    "value" : "tests.TestScript.configsmainApi"
  }, {
    "name" : "suite",
    "value" : "test_configsmain"
  }, {
    "name" : "subSuite",
    "value" : "TestConfigsmain"
  }, {
    "name" : "host",
    "value" : "anqidediannao.local"
  }, {
    "name" : "thread",
    "value" : "10637-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.TestScript.configsmainApi.test_configsmain"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case_data",
    "value" : "{'test_name': 'configsmain_1', 'case_id': 1, 'is_run': None, 'info': 'configsmain', 'parameter': None, 'cookies': True, 'timeout': 10, 'check': {'expected_result': ['\"ret\": 0'], 'check_type': 'Regular_check', 'expected_code': 200}, 'global_relevance': None, 'relevance': None}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "blocker",
    "retries" : [ {
      "uid" : "9fdd5ed8905267f3",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617630337767,
        "stop" : 1617630337908,
        "duration" : 141
      }
    }, {
      "uid" : "a5a735ae7d450339",
      "status" : "passed",
      "time" : {
        "start" : 1617629451491,
        "stop" : 1617629451672,
        "duration" : 181
      }
    }, {
      "uid" : "32f24c3995011845",
      "status" : "passed",
      "time" : {
        "start" : 1617629113524,
        "stop" : 1617629113734,
        "duration" : 210
      }
    }, {
      "uid" : "bf5ed46fb973bf5c",
      "status" : "passed",
      "time" : {
        "start" : 1617626819379,
        "stop" : 1617626819602,
        "duration" : 223
      }
    }, {
      "uid" : "74206e80f3b0821",
      "status" : "passed",
      "time" : {
        "start" : 1617614749674,
        "stop" : 1617614749932,
        "duration" : 258
      }
    }, {
      "uid" : "c518c88425106711",
      "status" : "broken",
      "statusDetails" : "requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='m.test.qingxuetang.com', port=443): Max retries exceeded with url: /mapi/configs/main (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x113ee12b0>, 'Connection to m.test.qingxuetang.com timed out. (connect timeout=10)'))",
      "time" : {
        "start" : 1617614469566,
        "stop" : 1617614479582,
        "duration" : 10016
      }
    }, {
      "uid" : "f91e42caf8d33e5e",
      "status" : "passed",
      "time" : {
        "start" : 1617614383651,
        "stop" : 1617614383864,
        "duration" : 213
      }
    }, {
      "uid" : "d2cdf21d7e55279f",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617614249898,
        "stop" : 1617614250076,
        "duration" : 178
      }
    }, {
      "uid" : "e0e42cc4592b538",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617613597363,
        "stop" : 1617613597783,
        "duration" : 420
      }
    }, {
      "uid" : "59579ad91d32dbd6",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617612171438,
        "stop" : 1617612171594,
        "duration" : 156
      }
    }, {
      "uid" : "524f481aac9d13c",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617612037591,
        "stop" : 1617612037725,
        "duration" : 134
      }
    }, {
      "uid" : "f6701fe43ed93385",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617612006364,
        "stop" : 1617612006484,
        "duration" : 120
      }
    }, {
      "uid" : "d639156f231b6690",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617611961313,
        "stop" : 1617611961436,
        "duration" : 123
      }
    }, {
      "uid" : "e33e7a1b592e8658",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617611931670,
        "stop" : 1617611931800,
        "duration" : 130
      }
    }, {
      "uid" : "8bd8602c981f55aa",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617611692427,
        "stop" : 1617611692557,
        "duration" : 130
      }
    }, {
      "uid" : "ddb0aece8e2d026b",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617611619727,
        "stop" : 1617611619871,
        "duration" : 144
      }
    }, {
      "uid" : "5029d1967950f368",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617610942477,
        "stop" : 1617610942605,
        "duration" : 128
      }
    }, {
      "uid" : "e97c20920c3b4d43",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617610597937,
        "stop" : 1617610598055,
        "duration" : 118
      }
    }, {
      "uid" : "68c27fbb4957a229",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617609970730,
        "stop" : 1617609970876,
        "duration" : 146
      }
    }, {
      "uid" : "aadc8824ffe85779",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617609802657,
        "stop" : 1617609802781,
        "duration" : 124
      }
    }, {
      "uid" : "8f6e6a2932594365",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617609723339,
        "stop" : 1617609723469,
        "duration" : 130
      }
    }, {
      "uid" : "4079a43e326852b5",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617609376955,
        "stop" : 1617609377070,
        "duration" : 115
      }
    }, {
      "uid" : "d862a371ea2597d5",
      "status" : "broken",
      "statusDetails" : "TypeError: a bytes-like object is required, not 'NoneType'",
      "time" : {
        "start" : 1617608244095,
        "stop" : 1617608244098,
        "duration" : 3
      }
    }, {
      "uid" : "28662ee0f3e18e0d",
      "status" : "broken",
      "statusDetails" : "TypeError: a bytes-like object is required, not 'NoneType'",
      "time" : {
        "start" : 1617608092870,
        "stop" : 1617608092874,
        "duration" : 4
      }
    }, {
      "uid" : "eb14c82fd138832a",
      "status" : "broken",
      "statusDetails" : "TypeError: a bytes-like object is required, not 'NoneType'",
      "time" : {
        "start" : 1617607868885,
        "stop" : 1617607868890,
        "duration" : 5
      }
    }, {
      "uid" : "53f679a14a15df1c",
      "status" : "broken",
      "statusDetails" : "TypeError: a bytes-like object is required, not 'NoneType'",
      "time" : {
        "start" : 1617607102871,
        "stop" : 1617607102874,
        "duration" : 3
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "@pytest.mark.skipif(False, reason='该用例的用例等级为：blocker，不在本次运行级别['blocker', 'critical', 'normal', 'minor']内')" ]
  },
  "source" : "3049a103d2cf6ee.json",
  "parameterValues" : [ "{'test_name': 'configsmain_1', 'case_id': 1, 'is_run': None, 'info': 'configsmain', 'parameter': None, 'cookies': True, 'timeout': 10, 'check': {'expected_result': ['\"ret\": 0'], 'check_type': 'Regular_check', 'expected_code': 200}, 'global_relevance': None, 'relevance': None}" ]
}