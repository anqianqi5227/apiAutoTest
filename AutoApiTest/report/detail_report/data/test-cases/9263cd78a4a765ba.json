{
  "uid" : "9263cd78a4a765ba",
  "name" : "test_case[login0-case_data0]",
  "fullName" : "tests.TestScript.pageApi.test_page.TestPage#test_case",
  "historyId" : "eb334c558b3408a2ad136d8fece96b42",
  "time" : {
    "start" : 1617633207728,
    "stop" : 1617633207733,
    "duration" : 5
  },
  "status" : "broken",
  "statusMessage" : "TypeError: can only concatenate str (not \"NoneType\") to str",
  "statusTrace" : "self = <test_page.TestPage object at 0x1109a4208>\ncase_data = {'address': None, 'check': {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"corpId\": 43']}, 'cookies': None, 'file': False, ...}\nsetupClass = {}\n\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"product_version\"] in product_version,\n                        reason=\"该用例所属版本为：{0}，在本次排除版本{1}内\".format(case_dict[\"test_info\"][\"product_version\"],\n                                                                 product_version))\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"case_level\"] not in case_level,\n                        reason=\"该用例的用例等级为：{0}，不在本次运行级别{1}内\".format(case_dict[\"test_info\"][\"case_level\"], case_level))\n    # @pytest.mark.run(order=case_dict[\"test_info\"][\"run_order\"])\n    @allure.severity(case_dict[\"test_info\"][\"case_level\"])\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"page\")\n    def test_case(self, case_data, setupClass):\n        self.relevance = setupTest(relevance_path, case_data, setupClass)\n>       api_send_check(case_data, case_dict, case_path, self.relevance)\n\n/Users/nali/AutoApiTest/tests/TestScript/pageApi/test_page.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/nali/AutoApiTest/common/unit/api_send_check.py:26: in api_send_check\n    res = api_send.api_send(case_data, case_dict, case_path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncase_dict = {'address': None, 'check': {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"corpId\": 43']}, 'cookies': None, 'file': False, ...}\nprarm_dict = {'premise': [{'is_run': False}], 'test_case': [{'address': None, 'check': {'check_type': 'Regular_check', 'expected_co...': False, ...}], 'test_info': {'address': '/mapi/page', 'case_level': 'blocker', 'cookies': False, 'file': False, ...}}\npath = '/Users/nali/AutoApiTest/tests/TestCases/pageApi'\nrelevance = {'corpCode': 'p1u5Es8yX98', 'uid': 239283, 'uidCode': '_GAQsTvZuwo'}\n\n    def api_send(case_dict, prarm_dict, path, relevance):\n        try:\n            cur_host = prarm_dict['test_info'].get('host')\n            cur_address = prarm_dict['test_info'].get('address')\n            cur_headers = prarm_dict['test_info'].get('headers')\n            cur_http_type = prarm_dict['test_info'].get('http_type')\n            cur_request_type = prarm_dict['test_info'].get('request_type')\n            cur_parameter_type = prarm_dict['test_info'].get('parameter_type')\n            cur_cookies = prarm_dict['test_info'].get('host')\n            cur_file = prarm_dict['test_info'].get('file')\n            cur_timeout = prarm_dict['test_info'].get('timeout')\n    \n        except Exception as e:\n            logging.exception(\"获取用例基本信息失败 %s \" % e)\n    \n        try:\n            # 若case中填写host关键字的值，则使用case中的host值，若case中没有host关键字，则使用全局传入的默认值\n            cur_host = case_dict['host']\n        except KeyError:\n            pass\n        try:\n            # 若case中填写address关键字的值，则使用case中的address值，若case中没有address关键字，则使用全局传入的默认值\n            cur_address = case_dict['address']\n        except KeyError:\n            pass\n        try:\n            # 若case中填写headers关键字的值，则使用case中的headers值，若case中headers关键字值为空，则此处headers值处理为None，\n            # 若case中没有headers关键字，则使用全局传入的默认值\n            cur_headers = case_dict['headers']\n        except KeyError:\n            pass\n        try:\n            cur_http_type = case_dict['http_type']\n        except KeyError:\n            pass\n        try:\n            cur_parameter_type = case_dict['parameter_type']\n        except KeyError:\n            pass\n        try:\n            cur_request_type = case_dict['request_type']\n        except KeyError:\n            pass\n        try:\n            cur_cookies = case_dict['cookies']\n        except KeyError:\n            pass\n        try:\n            cur_file = case_dict['file']\n        except KeyError:\n            pass\n        try:\n            cur_timeout = case_dict['timeout']\n        except KeyError:\n            pass\n    \n        cookie = None\n        if cur_cookies is True:\n            cookie_path = root_path + \"/common/config_module/relevance\"\n            cookie = read_relevance(cookie_path, 'cookie')\n            logging.debug(\"cookie处理结果为：%s\" % cookie)\n        else:\n            pass\n        print(cookie)\n        parameter = read_param(case_dict['test_name'], case_dict['parameter'], path, relevance)\n        print(parameter)\n        logging.debug(\"请求参数处理结果：%s\" % parameter)\n    \n        address = replace(cur_address, relevance)\n        print(address)\n        logging.debug(\"请求地址处理结果：%s\" % cur_address)\n    \n        host = conf_manage(cur_host, 'HOST')\n        print(host)\n        logging.debug(\"host地址处理结果：%s\" % host)\n        # print(cur_headers)\n        if isinstance(cur_headers, str):\n            # print(conf_manage(cur_headers, 'HEADERS'))\n            headers = json.loads(conf_manage(cur_headers, 'HEADERS'))\n            logging.debug(\"请求头处理结果为：{}\".format(headers))\n            print(headers)\n            # print(headers)\n        if cur_request_type == 'post':\n    \n            logging.info(\"请求方法为 %s\" % 'post')\n            with allure.step(\"POST请求接口\"):\n                allure.attach(case_dict[\"test_name\"], \"请求接口：\")\n                allure.attach(case_dict[\"info\"], \"用例描述：\")\n                allure.attach(cur_http_type + \"://\" + host + address, \"请求地址\")\n                allure.attach(str(headers), \"请求头\")\n                allure.attach(str(parameter), \"请求参数\")\n            result = api_method.post(url=cur_http_type + '://' + host + address,\n                                     request_parameter_type=cur_parameter_type,\n                                     headers=headers,\n                                     timeout=cur_timeout,\n                                     data=parameter,\n                                     cookie=cookie)\n            logging.info(\"请求接口结果：\\n {}\".format(result))\n            return result\n    \n        elif cur_request_type == 'get':\n            logging.info(\"请求方法为 %s\" % 'get')\n            with allure.step(\"get请求接口\"):\n                allure.attach(case_dict[\"test_name\"], \"请求接口：\")\n                allure.attach(case_dict[\"info\"], \"用例描述：\")\n>               allure.attach(cur_http_type + \"://\" + host + address, \"请求地址\")\nE               TypeError: can only concatenate str (not \"NoneType\") to str\n\n/Users/nali/AutoApiTest/common/unit/api_send.py:118: TypeError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "setupClass",
    "time" : {
      "start" : 1617633207716,
      "stop" : 1617633207716,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "login",
    "time" : {
      "start" : 1617633206130,
      "stop" : 1617633206449,
      "duration" : 319
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "POST请求接口",
      "time" : {
        "start" : 1617633206135,
        "stop" : 1617633206138,
        "duration" : 3
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "42130f6844e2edc2",
        "name" : "请求接口：",
        "source" : "42130f6844e2edc2.attach",
        "type" : "text/plain",
        "size" : 8
      }, {
        "uid" : "fa2e9839da8d954a",
        "name" : "用例描述：",
        "source" : "fa2e9839da8d954a.attach",
        "type" : "text/plain",
        "size" : 16
      }, {
        "uid" : "854441cc6df6d013",
        "name" : "请求地址",
        "source" : "854441cc6df6d013.attach",
        "type" : "text/plain",
        "size" : 54
      }, {
        "uid" : "2214fa027bc112fc",
        "name" : "请求头",
        "source" : "2214fa027bc112fc.attach",
        "type" : "text/plain",
        "size" : 68
      }, {
        "uid" : "6eaecd6bceeab283",
        "name" : "请求参数",
        "source" : "6eaecd6bceeab283.attach",
        "type" : "text/plain",
        "size" : 111
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 5,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "不校验结果",
      "time" : {
        "start" : 1617633206447,
        "stop" : 1617633206447,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "关联值写入关联池文件",
      "time" : {
        "start" : 1617633206448,
        "stop" : 1617633206448,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "2b47fb6a369cdb57",
        "name" : "接口中获取的关联值",
        "source" : "2b47fb6a369cdb57.attach",
        "type" : "text/plain",
        "size" : 4
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 6,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "TypeError: can only concatenate str (not \"NoneType\") to str",
    "statusTrace" : "self = <test_page.TestPage object at 0x1109a4208>\ncase_data = {'address': None, 'check': {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"corpId\": 43']}, 'cookies': None, 'file': False, ...}\nsetupClass = {}\n\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"product_version\"] in product_version,\n                        reason=\"该用例所属版本为：{0}，在本次排除版本{1}内\".format(case_dict[\"test_info\"][\"product_version\"],\n                                                                 product_version))\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"case_level\"] not in case_level,\n                        reason=\"该用例的用例等级为：{0}，不在本次运行级别{1}内\".format(case_dict[\"test_info\"][\"case_level\"], case_level))\n    # @pytest.mark.run(order=case_dict[\"test_info\"][\"run_order\"])\n    @allure.severity(case_dict[\"test_info\"][\"case_level\"])\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"page\")\n    def test_case(self, case_data, setupClass):\n        self.relevance = setupTest(relevance_path, case_data, setupClass)\n>       api_send_check(case_data, case_dict, case_path, self.relevance)\n\n/Users/nali/AutoApiTest/tests/TestScript/pageApi/test_page.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/nali/AutoApiTest/common/unit/api_send_check.py:26: in api_send_check\n    res = api_send.api_send(case_data, case_dict, case_path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncase_dict = {'address': None, 'check': {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"corpId\": 43']}, 'cookies': None, 'file': False, ...}\nprarm_dict = {'premise': [{'is_run': False}], 'test_case': [{'address': None, 'check': {'check_type': 'Regular_check', 'expected_co...': False, ...}], 'test_info': {'address': '/mapi/page', 'case_level': 'blocker', 'cookies': False, 'file': False, ...}}\npath = '/Users/nali/AutoApiTest/tests/TestCases/pageApi'\nrelevance = {'corpCode': 'p1u5Es8yX98', 'uid': 239283, 'uidCode': '_GAQsTvZuwo'}\n\n    def api_send(case_dict, prarm_dict, path, relevance):\n        try:\n            cur_host = prarm_dict['test_info'].get('host')\n            cur_address = prarm_dict['test_info'].get('address')\n            cur_headers = prarm_dict['test_info'].get('headers')\n            cur_http_type = prarm_dict['test_info'].get('http_type')\n            cur_request_type = prarm_dict['test_info'].get('request_type')\n            cur_parameter_type = prarm_dict['test_info'].get('parameter_type')\n            cur_cookies = prarm_dict['test_info'].get('host')\n            cur_file = prarm_dict['test_info'].get('file')\n            cur_timeout = prarm_dict['test_info'].get('timeout')\n    \n        except Exception as e:\n            logging.exception(\"获取用例基本信息失败 %s \" % e)\n    \n        try:\n            # 若case中填写host关键字的值，则使用case中的host值，若case中没有host关键字，则使用全局传入的默认值\n            cur_host = case_dict['host']\n        except KeyError:\n            pass\n        try:\n            # 若case中填写address关键字的值，则使用case中的address值，若case中没有address关键字，则使用全局传入的默认值\n            cur_address = case_dict['address']\n        except KeyError:\n            pass\n        try:\n            # 若case中填写headers关键字的值，则使用case中的headers值，若case中headers关键字值为空，则此处headers值处理为None，\n            # 若case中没有headers关键字，则使用全局传入的默认值\n            cur_headers = case_dict['headers']\n        except KeyError:\n            pass\n        try:\n            cur_http_type = case_dict['http_type']\n        except KeyError:\n            pass\n        try:\n            cur_parameter_type = case_dict['parameter_type']\n        except KeyError:\n            pass\n        try:\n            cur_request_type = case_dict['request_type']\n        except KeyError:\n            pass\n        try:\n            cur_cookies = case_dict['cookies']\n        except KeyError:\n            pass\n        try:\n            cur_file = case_dict['file']\n        except KeyError:\n            pass\n        try:\n            cur_timeout = case_dict['timeout']\n        except KeyError:\n            pass\n    \n        cookie = None\n        if cur_cookies is True:\n            cookie_path = root_path + \"/common/config_module/relevance\"\n            cookie = read_relevance(cookie_path, 'cookie')\n            logging.debug(\"cookie处理结果为：%s\" % cookie)\n        else:\n            pass\n        print(cookie)\n        parameter = read_param(case_dict['test_name'], case_dict['parameter'], path, relevance)\n        print(parameter)\n        logging.debug(\"请求参数处理结果：%s\" % parameter)\n    \n        address = replace(cur_address, relevance)\n        print(address)\n        logging.debug(\"请求地址处理结果：%s\" % cur_address)\n    \n        host = conf_manage(cur_host, 'HOST')\n        print(host)\n        logging.debug(\"host地址处理结果：%s\" % host)\n        # print(cur_headers)\n        if isinstance(cur_headers, str):\n            # print(conf_manage(cur_headers, 'HEADERS'))\n            headers = json.loads(conf_manage(cur_headers, 'HEADERS'))\n            logging.debug(\"请求头处理结果为：{}\".format(headers))\n            print(headers)\n            # print(headers)\n        if cur_request_type == 'post':\n    \n            logging.info(\"请求方法为 %s\" % 'post')\n            with allure.step(\"POST请求接口\"):\n                allure.attach(case_dict[\"test_name\"], \"请求接口：\")\n                allure.attach(case_dict[\"info\"], \"用例描述：\")\n                allure.attach(cur_http_type + \"://\" + host + address, \"请求地址\")\n                allure.attach(str(headers), \"请求头\")\n                allure.attach(str(parameter), \"请求参数\")\n            result = api_method.post(url=cur_http_type + '://' + host + address,\n                                     request_parameter_type=cur_parameter_type,\n                                     headers=headers,\n                                     timeout=cur_timeout,\n                                     data=parameter,\n                                     cookie=cookie)\n            logging.info(\"请求接口结果：\\n {}\".format(result))\n            return result\n    \n        elif cur_request_type == 'get':\n            logging.info(\"请求方法为 %s\" % 'get')\n            with allure.step(\"get请求接口\"):\n                allure.attach(case_dict[\"test_name\"], \"请求接口：\")\n                allure.attach(case_dict[\"info\"], \"用例描述：\")\n>               allure.attach(cur_http_type + \"://\" + host + address, \"请求地址\")\nE               TypeError: can only concatenate str (not \"NoneType\") to str\n\n/Users/nali/AutoApiTest/common/unit/api_send.py:118: TypeError",
    "steps" : [ {
      "name" : "get请求接口",
      "time" : {
        "start" : 1617633207730,
        "stop" : 1617633207732,
        "duration" : 2
      },
      "status" : "broken",
      "statusMessage" : "TypeError: can only concatenate str (not \"NoneType\") to str\n",
      "statusTrace" : "  File \"/Users/nali/AutoApiTest/common/unit/api_send.py\", line 118, in api_send\n    allure.attach(cur_http_type + \"://\" + host + address, \"请求地址\")\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "ed9a79f844b4f0b2",
        "name" : "请求接口：",
        "source" : "ed9a79f844b4f0b2.attach",
        "type" : "text/plain",
        "size" : 6
      }, {
        "uid" : "1b094341a4d98c9f",
        "name" : "用例描述：",
        "source" : "1b094341a4d98c9f.attach",
        "type" : "text/plain",
        "size" : 12
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 2,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "dc3d6bcfd6faa598",
      "name" : "log",
      "source" : "dc3d6bcfd6faa598.txt",
      "type" : "text/plain",
      "size" : 49
    }, {
      "uid" : "2e9f2da6b761b69a",
      "name" : "stdout",
      "source" : "2e9f2da6b761b69a.txt",
      "type" : "text/plain",
      "size" : 20
    } ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 4,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "login::0",
    "time" : {
      "start" : 1617633208235,
      "stop" : 1617633208235,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "feature",
    "value" : "page"
  }, {
    "name" : "story",
    "value" : "page"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.skipif(False, reason='该用例的用例等级为：blocker，不在本次运行级别['blocker', 'critical', 'normal', 'minor']内')"
  }, {
    "name" : "parentSuite",
    "value" : "tests.TestScript.pageApi"
  }, {
    "name" : "suite",
    "value" : "test_page"
  }, {
    "name" : "subSuite",
    "value" : "TestPage"
  }, {
    "name" : "host",
    "value" : "anqidediannao.local"
  }, {
    "name" : "thread",
    "value" : "13279-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.TestScript.pageApi.test_page"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case_data",
    "value" : "{'test_name': 'page_1', 'info': '频道数据', 'is_run': None, 'host': None, 'headers': None, 'address': None, 'http_type': 'https', 'request_type': 'get', 'parameter_type': 'data', 'parameter': None, 'cookies': None, 'timeout': 10, 'check': {'expected_result': ['\"corpId\": 43'], 'check_type': 'Regular_check', 'expected_code': 200}, 'file': False, 'global_relevance': True, 'relevance': {'uid': 'uid', 'uidCode': 'uidCode'}}"
  }, {
    "name" : "login",
    "value" : "{'test_name': 'login_h5', 'info': '密码登录m站', 'is_run': None, 'host': '${HOST1}$', 'headers': '${headers1}$', 'address': '/passport/api/pwdLogin', 'http_type': 'https', 'request_type': 'post_cookie', 'parameter_type': 'data', 'parameter': {'passport': 17521200974, 'password': 'anqi666', 'passportType': 1, 'sign': 'F017A0CD674A8B7A4F52B56898D78E6A'}, 'timeout': 10, 'cookies': False, 'check': {'expected_result': None, 'check_type': 'no_check', 'expected_code': None}, 'file': False, 'global_relevance': None, 'relevance': None}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.skipif(False, reason='该用例的用例等级为：blocker，不在本次运行级别['blocker', 'critical', 'normal', 'minor']内')" ]
  },
  "source" : "9263cd78a4a765ba.json",
  "parameterValues" : [ "{'test_name': 'page_1', 'info': '频道数据', 'is_run': None, 'host': None, 'headers': None, 'address': None, 'http_type': 'https', 'request_type': 'get', 'parameter_type': 'data', 'parameter': None, 'cookies': None, 'timeout': 10, 'check': {'expected_result': ['\"corpId\": 43'], 'check_type': 'Regular_check', 'expected_code': 200}, 'file': False, 'global_relevance': True, 'relevance': {'uid': 'uid', 'uidCode': 'uidCode'}}", "{'test_name': 'login_h5', 'info': '密码登录m站', 'is_run': None, 'host': '${HOST1}$', 'headers': '${headers1}$', 'address': '/passport/api/pwdLogin', 'http_type': 'https', 'request_type': 'post_cookie', 'parameter_type': 'data', 'parameter': {'passport': 17521200974, 'password': 'anqi666', 'passportType': 1, 'sign': 'F017A0CD674A8B7A4F52B56898D78E6A'}, 'timeout': 10, 'cookies': False, 'check': {'expected_result': None, 'check_type': 'no_check', 'expected_code': None}, 'file': False, 'global_relevance': None, 'relevance': None}" ]
}