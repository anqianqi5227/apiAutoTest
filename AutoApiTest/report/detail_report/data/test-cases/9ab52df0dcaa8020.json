{
  "uid" : "9ab52df0dcaa8020",
  "name" : "test_case[login0-case_data0]",
  "fullName" : "tests.TestScript.infoApi.test_info.TestPremise#test_case",
  "historyId" : "be27b079f5db00d7cf7f8c17365bf6a5",
  "time" : {
    "start" : 1617514563678,
    "stop" : 1617514564059,
    "duration" : 381
  },
  "status" : "broken",
  "statusMessage" : "AttributeError: 'NoneType' object has no attribute 'replace'",
  "statusTrace" : "self = <test_info.TestPremise object at 0x11184bf98>\ncase_data = {'address': '/mapi/user/info', 'check': {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"corpId\": 43', '\"corpCode\":${uidCode}$']}, 'cookies': True, 'file': False, ...}\nsetupClass = {}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"info\")\n    def test_case(self, case_data, setupClass):\n        self.relevance = setupTest(relevance_path, case_data, setupClass)\n>       api_send_check(case_data, case_dict, case_path, self.relevance)\n\n/Users/nali/AutoApiTest/tests/TestScript/infoApi/test_info.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/nali/AutoApiTest/common/unit/api_send_check.py:33: in api_send_check\n    check_result.check_result(test_name, check_data, code, data, case_path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_name = 'info'\ncase = {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"corpId\": 43', '\"corpCode\":${uidCode}$']}\ncode = 200\ndata = {'data': {'avatar': 'http://imagev2.test.ximalaya.com/storages/6479-audiotest/E8/94/CAoVXrsEKku5AAEkuQAAM3wd.jpg!op_ty...columns=300&rows=300', 'capacity': 1, 'channelName': '45sgg', 'corpCode': 'p1u5Es8yX98', ...}, 'msg': '操作成功', 'ret': 0}\n_path = '/Users/nali/AutoApiTest/tests/TestCases/infoApi', relevance = {}\n\n    def check_result(test_name, case, code, data, _path, relevance=None):\n        \"\"\"\n        校验测试结果\n        :param test_name: 测试名称\n        :param case: 测试用例中check字段，默认为dict\n        :param code: HTTP状态\n        :param data: 返回的接口json数据\n        :param relevance: 关联值对象\n        :param _path: case路径\n        :return:\n        \"\"\"\n        # 不校验结果\n        print(case[\"check_type\"])\n        if case[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n    \n        # json格式校验\n        elif case[\"check_type\"] == 'json':\n            expected_result = case[\"expected_result\"]\n            if isinstance(case[\"expected_result\"], str):\n                expected_result = read_param(test_name, expected_result, _path, relevance)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(expected_result), '期望data')\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if int(code) == case[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                check_json(expected_result, data)\n            else:\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 只校验状态码\n        elif case[\"check_type\"] == 'only_check_status':\n            with allure.step(\"校验HTTP状态\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if code == case[\"expected_code\"]:\n                pass\n            else:\n                print(code)\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 完全校验\n        # elif case[\"check_type\"] == 'entirely_check':\n        #     expected_result = case[\"expected_result\"]\n        #     if isinstance(case[\"expected_result\"], str):\n        #         expected_result = read_json(test_name, expected_result, _path, relevance)\n        #     # with allure.step(\"完全校验结果\"):\n        #     #     allure.attach(\"期望code\", str(case[\"expected_code\"]))\n        #     #     allure.attach('期望data', str(expected_result))\n        #     #     allure.attach(\"实际code\", str(code))\n        #     #     allure.attach('实际data', str(data.yaml))\n        #     if int(code) == case[\"expected_code\"]:\n        #         result = operator.eq(expected_result, data.yaml)\n        #         if result:\n        #             pass\n        #         else:\n        #             raise Exception(\"完全校验失败！ {0} ! = {1}\".format(expected_result, data.yaml))\n        #     else:\n        #         raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 正则校验\n        elif case[\"check_type\"] == 'Regular_check':\n            if int(code) == case[\"expected_code\"]:\n                try:\n                    result = \"\"\n                    if isinstance(case[\"expected_result\"], list):\n                        with allure.step(\"正则校验\"):\n                            for i in case[\"expected_result\"]:\n                                # 替换用例中关联关系\n                                re_i = single_replace(i, relevance)\n>                               result = re.findall(re_i.replace(\"\\\"\", \"\\'\"), str(data))\nE                               AttributeError: 'NoneType' object has no attribute 'replace'\n\n/Users/nali/AutoApiTest/common/unit/check_result.py:105: AttributeError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "setupClass",
    "time" : {
      "start" : 1617514563670,
      "stop" : 1617514563670,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "login",
    "time" : {
      "start" : 1617514563427,
      "stop" : 1617514563670,
      "duration" : 243
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "POST请求接口",
      "time" : {
        "start" : 1617514563438,
        "stop" : 1617514563446,
        "duration" : 8
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "5118a038a225b33b",
        "name" : "请求接口：",
        "source" : "5118a038a225b33b.attach",
        "type" : "text/plain",
        "size" : 8
      }, {
        "uid" : "81a6d33a13601f36",
        "name" : "用例描述：",
        "source" : "81a6d33a13601f36.attach",
        "type" : "text/plain",
        "size" : 16
      }, {
        "uid" : "48bd72802e389181",
        "name" : "请求地址",
        "source" : "48bd72802e389181.attach",
        "type" : "text/plain",
        "size" : 54
      }, {
        "uid" : "6b89169d37e51b43",
        "name" : "请求头",
        "source" : "6b89169d37e51b43.attach",
        "type" : "text/plain",
        "size" : 68
      }, {
        "uid" : "f83aca05a3f6a34f",
        "name" : "请求参数",
        "source" : "f83aca05a3f6a34f.attach",
        "type" : "text/plain",
        "size" : 111
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 5,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "不校验结果",
      "time" : {
        "start" : 1617514563669,
        "stop" : 1617514563669,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "关联值写入关联池文件",
      "time" : {
        "start" : 1617514563669,
        "stop" : 1617514563669,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "a9226d0d6560b017",
        "name" : "None",
        "source" : "a9226d0d6560b017.attach",
        "type" : "text/plain",
        "size" : 27
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 6,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "AttributeError: 'NoneType' object has no attribute 'replace'",
    "statusTrace" : "self = <test_info.TestPremise object at 0x11184bf98>\ncase_data = {'address': '/mapi/user/info', 'check': {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"corpId\": 43', '\"corpCode\":${uidCode}$']}, 'cookies': True, 'file': False, ...}\nsetupClass = {}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"info\")\n    def test_case(self, case_data, setupClass):\n        self.relevance = setupTest(relevance_path, case_data, setupClass)\n>       api_send_check(case_data, case_dict, case_path, self.relevance)\n\n/Users/nali/AutoApiTest/tests/TestScript/infoApi/test_info.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/nali/AutoApiTest/common/unit/api_send_check.py:33: in api_send_check\n    check_result.check_result(test_name, check_data, code, data, case_path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_name = 'info'\ncase = {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"corpId\": 43', '\"corpCode\":${uidCode}$']}\ncode = 200\ndata = {'data': {'avatar': 'http://imagev2.test.ximalaya.com/storages/6479-audiotest/E8/94/CAoVXrsEKku5AAEkuQAAM3wd.jpg!op_ty...columns=300&rows=300', 'capacity': 1, 'channelName': '45sgg', 'corpCode': 'p1u5Es8yX98', ...}, 'msg': '操作成功', 'ret': 0}\n_path = '/Users/nali/AutoApiTest/tests/TestCases/infoApi', relevance = {}\n\n    def check_result(test_name, case, code, data, _path, relevance=None):\n        \"\"\"\n        校验测试结果\n        :param test_name: 测试名称\n        :param case: 测试用例中check字段，默认为dict\n        :param code: HTTP状态\n        :param data: 返回的接口json数据\n        :param relevance: 关联值对象\n        :param _path: case路径\n        :return:\n        \"\"\"\n        # 不校验结果\n        print(case[\"check_type\"])\n        if case[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n    \n        # json格式校验\n        elif case[\"check_type\"] == 'json':\n            expected_result = case[\"expected_result\"]\n            if isinstance(case[\"expected_result\"], str):\n                expected_result = read_param(test_name, expected_result, _path, relevance)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(expected_result), '期望data')\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if int(code) == case[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                check_json(expected_result, data)\n            else:\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 只校验状态码\n        elif case[\"check_type\"] == 'only_check_status':\n            with allure.step(\"校验HTTP状态\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if code == case[\"expected_code\"]:\n                pass\n            else:\n                print(code)\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 完全校验\n        # elif case[\"check_type\"] == 'entirely_check':\n        #     expected_result = case[\"expected_result\"]\n        #     if isinstance(case[\"expected_result\"], str):\n        #         expected_result = read_json(test_name, expected_result, _path, relevance)\n        #     # with allure.step(\"完全校验结果\"):\n        #     #     allure.attach(\"期望code\", str(case[\"expected_code\"]))\n        #     #     allure.attach('期望data', str(expected_result))\n        #     #     allure.attach(\"实际code\", str(code))\n        #     #     allure.attach('实际data', str(data.yaml))\n        #     if int(code) == case[\"expected_code\"]:\n        #         result = operator.eq(expected_result, data.yaml)\n        #         if result:\n        #             pass\n        #         else:\n        #             raise Exception(\"完全校验失败！ {0} ! = {1}\".format(expected_result, data.yaml))\n        #     else:\n        #         raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 正则校验\n        elif case[\"check_type\"] == 'Regular_check':\n            if int(code) == case[\"expected_code\"]:\n                try:\n                    result = \"\"\n                    if isinstance(case[\"expected_result\"], list):\n                        with allure.step(\"正则校验\"):\n                            for i in case[\"expected_result\"]:\n                                # 替换用例中关联关系\n                                re_i = single_replace(i, relevance)\n>                               result = re.findall(re_i.replace(\"\\\"\", \"\\'\"), str(data))\nE                               AttributeError: 'NoneType' object has no attribute 'replace'\n\n/Users/nali/AutoApiTest/common/unit/check_result.py:105: AttributeError",
    "steps" : [ {
      "name" : "get请求接口",
      "time" : {
        "start" : 1617514563680,
        "stop" : 1617514563681,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "5472b44a92b7c28a",
        "name" : "请求接口：",
        "source" : "5472b44a92b7c28a.attach",
        "type" : "text/plain",
        "size" : 4
      }, {
        "uid" : "75584dda9ecd1d41",
        "name" : "用例描述：",
        "source" : "75584dda9ecd1d41.attach",
        "type" : "text/plain",
        "size" : 12
      }, {
        "uid" : "689ecbfbeea712ac",
        "name" : "请求地址",
        "source" : "689ecbfbeea712ac.attach",
        "type" : "text/plain",
        "size" : 45
      }, {
        "uid" : "d22317c36fbd86db",
        "name" : "请求头",
        "source" : "d22317c36fbd86db.attach",
        "type" : "text/plain",
        "size" : 68
      }, {
        "uid" : "a57eb9377e1283cb",
        "name" : "请求参数",
        "source" : "a57eb9377e1283cb.attach",
        "type" : "text/plain",
        "size" : 4
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 5,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "正则校验",
      "time" : {
        "start" : 1617514564057,
        "stop" : 1617514564058,
        "duration" : 1
      },
      "status" : "broken",
      "statusMessage" : "AttributeError: 'NoneType' object has no attribute 'replace'\n",
      "statusTrace" : "  File \"/Users/nali/AutoApiTest/common/unit/check_result.py\", line 105, in check_result\n    result = re.findall(re_i.replace(\"\\\"\", \"\\'\"), str(data))\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "fb91ad2554ce660f",
        "name" : "正则校验结果\n",
        "source" : "fb91ad2554ce660f.attach",
        "type" : "text/plain",
        "size" : 48
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "5ad32cfb9cf20f4f",
      "name" : "log",
      "source" : "5ad32cfb9cf20f4f.txt",
      "type" : "text/plain",
      "size" : 11435
    }, {
      "uid" : "815687120578bfd9",
      "name" : "stdout",
      "source" : "815687120578bfd9.txt",
      "type" : "text/plain",
      "size" : 12382
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 8,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "info"
  }, {
    "name" : "feature",
    "value" : "info"
  }, {
    "name" : "parentSuite",
    "value" : "tests.TestScript.infoApi"
  }, {
    "name" : "suite",
    "value" : "test_info"
  }, {
    "name" : "subSuite",
    "value" : "TestPremise"
  }, {
    "name" : "host",
    "value" : "anqidediannao.local"
  }, {
    "name" : "thread",
    "value" : "76721-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.TestScript.infoApi.test_info"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case_data",
    "value" : "{'test_name': 'info', 'info': '个人信息', 'is_run': None, 'host': '${HOST2}$', 'headers': '${headers1}$', 'address': '/mapi/user/info', 'http_type': 'https', 'request_type': 'get', 'parameter_type': None, 'parameter': None, 'cookies': True, 'timeout': 10, 'check': {'expected_result': ['\"corpId\": 43', '\"corpCode\":${uidCode}$'], 'check_type': 'Regular_check', 'expected_code': 200}, 'file': False, 'global_relevance': True, 'relevance': {'uid': 'uid', 'uidCode': 'uidCode'}}"
  }, {
    "name" : "login",
    "value" : "{'test_name': 'login_h5', 'info': '密码登录m站', 'is_run': None, 'host': '${HOST1}$', 'headers': '${headers1}$', 'address': '/passport/api/pwdLogin', 'http_type': 'https', 'request_type': 'post_cookie', 'parameter_type': 'data', 'parameter': {'passport': 17521200974, 'password': 'anqi666', 'passportType': 1, 'sign': 'F017A0CD674A8B7A4F52B56898D78E6A'}, 'timeout': 10, 'cookies': False, 'check': {'expected_result': None, 'check_type': 'no_check', 'expected_code': None}, 'file': False, 'global_relevance': None, 'relevance': None}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "9ab52df0dcaa8020.json",
  "parameterValues" : [ "{'test_name': 'info', 'info': '个人信息', 'is_run': None, 'host': '${HOST2}$', 'headers': '${headers1}$', 'address': '/mapi/user/info', 'http_type': 'https', 'request_type': 'get', 'parameter_type': None, 'parameter': None, 'cookies': True, 'timeout': 10, 'check': {'expected_result': ['\"corpId\": 43', '\"corpCode\":${uidCode}$'], 'check_type': 'Regular_check', 'expected_code': 200}, 'file': False, 'global_relevance': True, 'relevance': {'uid': 'uid', 'uidCode': 'uidCode'}}", "{'test_name': 'login_h5', 'info': '密码登录m站', 'is_run': None, 'host': '${HOST1}$', 'headers': '${headers1}$', 'address': '/passport/api/pwdLogin', 'http_type': 'https', 'request_type': 'post_cookie', 'parameter_type': 'data', 'parameter': {'passport': 17521200974, 'password': 'anqi666', 'passportType': 1, 'sign': 'F017A0CD674A8B7A4F52B56898D78E6A'}, 'timeout': 10, 'cookies': False, 'check': {'expected_result': None, 'check_type': 'no_check', 'expected_code': None}, 'file': False, 'global_relevance': None, 'relevance': None}" ]
}