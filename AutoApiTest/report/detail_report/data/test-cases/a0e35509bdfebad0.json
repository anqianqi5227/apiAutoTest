{
  "uid" : "a0e35509bdfebad0",
  "name" : "test_premise[login0-None]",
  "fullName" : "tests.TestScript.infoApi.test_info.TestPremise#test_premise",
  "historyId" : "256f9c017328cb4f09fc2dfaf995633a",
  "time" : {
    "start" : 1617514045187,
    "stop" : 1617514045187,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "Exception: 无该校验方式：no_check",
  "statusTrace" : "request = <SubRequest 'login' for <Function test_premise[login0-None]>>\n\n    @pytest.fixture(scope='function',autouse=True,params=case_dict['test_case'])\n    def login(request):\n        for i in [\"GlobalRelevance.ini\", \"ModuleRelevance.ini\"]:\n            relevance_file = os.path.join(relevance_path, i)\n            cf = Config(relevance_file)\n            # print(relevance_file)\n            cf.add_conf('relevance')\n        logging.info(\"执行全局用例依赖接口，初始化数据！\")\n        relevance = re.ini_relevance(re.read_relevance(case_path, 'relevance'))\n        print(relevance)\n>       api_send_check(request.param, case_dict, case_path, relevance)\n\n/Users/nali/AutoApiTest/conftest.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/nali/AutoApiTest/common/unit/api_send_check.py:33: in api_send_check\n    check_result.check_result(test_name, check_data, code, data, case_path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_name = 'login_h5'\ncase = {'check_type': 'no_check', 'expected_code': None, 'expected_result': None}\ncode = 200\ndata = {'data': {'avatar': 'http://imagev2.test.ximalaya.com:8080/storages/6479-audiotest/E8/94/CAoVXrsEKku5AAEkuQAAM3wd.jpg!....xmcdn.com/lib/enterprise-user-admin/last/css/img/logo-qxt.png', 'name': '测试昵称', ...}, ...], ...}, 'msg': '', 'ret': 0}\n_path = '/Users/nali/AutoApiTest/tests/CommonApi/loginApi'\nrelevance = {'sign_h5_login': 'F017A0CD674A8B7A4F52B56898D78E6A'}\n\n    def check_result(test_name, case, code, data, _path, relevance=None):\n        \"\"\"\n        校验测试结果\n        :param test_name: 测试名称\n        :param case: 测试用例中check字段，默认为dict\n        :param code: HTTP状态\n        :param data: 返回的接口json数据\n        :param relevance: 关联值对象\n        :param _path: case路径\n        :return:\n        \"\"\"\n        # 不校验结果\n        print(case[\"check_type\"])\n        if case[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n    \n        # json格式校验\n        if case[\"check_type\"] == 'json':\n            expected_result = case[\"expected_result\"]\n            if isinstance(case[\"expected_result\"], str):\n                expected_result = read_param(test_name, expected_result, _path, relevance)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(expected_result), '期望data')\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if int(code) == case[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                check_json(expected_result, data)\n            else:\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 只校验状态码\n        elif case[\"check_type\"] == 'only_check_status':\n            with allure.step(\"校验HTTP状态\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if code == case[\"expected_code\"]:\n                pass\n            else:\n                print(code)\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 完全校验\n        # elif case[\"check_type\"] == 'entirely_check':\n        #     expected_result = case[\"expected_result\"]\n        #     if isinstance(case[\"expected_result\"], str):\n        #         expected_result = read_json(test_name, expected_result, _path, relevance)\n        #     # with allure.step(\"完全校验结果\"):\n        #     #     allure.attach(\"期望code\", str(case[\"expected_code\"]))\n        #     #     allure.attach('期望data', str(expected_result))\n        #     #     allure.attach(\"实际code\", str(code))\n        #     #     allure.attach('实际data', str(data.yaml))\n        #     if int(code) == case[\"expected_code\"]:\n        #         result = operator.eq(expected_result, data.yaml)\n        #         if result:\n        #             pass\n        #         else:\n        #             raise Exception(\"完全校验失败！ {0} ! = {1}\".format(expected_result, data.yaml))\n        #     else:\n        #         raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 正则校验\n        elif case[\"check_type\"] == 'Regular_check':\n            if int(code) == case[\"expected_code\"]:\n                try:\n                    result = \"\"\n                    if isinstance(case[\"expected_result\"], list):\n                        with allure.step(\"正则校验\"):\n                            for i in case[\"expected_result\"]:\n                                # 替换用例中关联关系\n                                re_i = single_replace(i, relevance)\n                                result = re.findall(re_i.replace(\"\\\"\", \"\\'\"), str(data))\n                                allure.attach(str(result),'正则校验结果\\n')\n                            allure.attach(str(data),'实际data')\n                    else:\n                        result = re.findall(case[\"expected_result\"].replace(\"\\\"\", \"\\'\"), str(data))\n                        with allure.step(\"正则校验\"):\n                            allure.attach(\"期望code\", str(case[\"expected_code\"]))\n                            allure.attach('正则表达式', str(case[\"expected_result\"]).replace(\"\\'\", \"\\\"\"))\n                            allure.attach(\"实际code\", str(code))\n                            allure.attach('实际data', str(data))\n                            allure.attach(case[\"expected_result\"].replace(\"\\\"\", \"\\'\") + '校验完成结果',\n                                          str(result).replace(\"\\'\", \"\\\"\"))\n                    if not result:\n                        raise Exception(\"正则未校验到内容！ {}\".format(case[\"expected_result\"]))\n                except KeyError:\n                    raise Exception(\"正则校验执行失败！ {}\\n正则表达式为空时\".format(case[\"expected_result\"]))\n            else:\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 数据库校验\n        # elif case[\"check_type\"] == \"datebase_check\":\n        #     pass\n    \n        else:\n>           raise Exception(\"无该校验方式：{}\".format(case[\"check_type\"]))\nE           Exception: 无该校验方式：no_check\n\n/Users/nali/AutoApiTest/common/unit/check_result.py:129: Exception",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "login",
    "time" : {
      "start" : 1617514045189,
      "stop" : 1617514045689,
      "duration" : 500
    },
    "status" : "broken",
    "statusMessage" : "Exception: 无该校验方式：no_check\n",
    "statusTrace" : "  File \"/Users/nali/anaconda3/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"/Users/nali/anaconda3/lib/python3.7/site-packages/_pytest/fixtures.py\", line 964, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/Users/nali/anaconda3/lib/python3.7/site-packages/_pytest/fixtures.py\", line 792, in call_fixture_func\n    res = fixturefunc(**kwargs)\n  File \"/Users/nali/AutoApiTest/conftest.py\", line 28, in login\n    api_send_check(request.param, case_dict, case_path, relevance)\n  File \"/Users/nali/AutoApiTest/common/unit/api_send_check.py\", line 33, in api_send_check\n    check_result.check_result(test_name, check_data, code, data, case_path, relevance)\n  File \"/Users/nali/AutoApiTest/common/unit/check_result.py\", line 129, in check_result\n    raise Exception(\"无该校验方式：{}\".format(case[\"check_type\"]))\n",
    "steps" : [ {
      "name" : "POST请求接口",
      "time" : {
        "start" : 1617514045194,
        "stop" : 1617514045198,
        "duration" : 4
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "da558dce851dbf35",
        "name" : "请求接口：",
        "source" : "da558dce851dbf35.attach",
        "type" : "text/plain",
        "size" : 8
      }, {
        "uid" : "3b7ccc578106e2d2",
        "name" : "用例描述：",
        "source" : "3b7ccc578106e2d2.attach",
        "type" : "text/plain",
        "size" : 16
      }, {
        "uid" : "7eb3d1340f34398d",
        "name" : "请求地址",
        "source" : "7eb3d1340f34398d.attach",
        "type" : "text/plain",
        "size" : 54
      }, {
        "uid" : "707831d8df509fe1",
        "name" : "请求头",
        "source" : "707831d8df509fe1.attach",
        "type" : "text/plain",
        "size" : 68
      }, {
        "uid" : "c23ee4bb14c2594",
        "name" : "请求参数",
        "source" : "c23ee4bb14c2594.attach",
        "type" : "text/plain",
        "size" : 111
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 5,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "不校验结果",
      "time" : {
        "start" : 1617514045689,
        "stop" : 1617514045689,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 5,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "setupClass",
    "time" : {
      "start" : 1617514045189,
      "stop" : 1617514045189,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "Exception: 无该校验方式：no_check",
    "statusTrace" : "request = <SubRequest 'login' for <Function test_premise[login0-None]>>\n\n    @pytest.fixture(scope='function',autouse=True,params=case_dict['test_case'])\n    def login(request):\n        for i in [\"GlobalRelevance.ini\", \"ModuleRelevance.ini\"]:\n            relevance_file = os.path.join(relevance_path, i)\n            cf = Config(relevance_file)\n            # print(relevance_file)\n            cf.add_conf('relevance')\n        logging.info(\"执行全局用例依赖接口，初始化数据！\")\n        relevance = re.ini_relevance(re.read_relevance(case_path, 'relevance'))\n        print(relevance)\n>       api_send_check(request.param, case_dict, case_path, relevance)\n\n/Users/nali/AutoApiTest/conftest.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/nali/AutoApiTest/common/unit/api_send_check.py:33: in api_send_check\n    check_result.check_result(test_name, check_data, code, data, case_path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_name = 'login_h5'\ncase = {'check_type': 'no_check', 'expected_code': None, 'expected_result': None}\ncode = 200\ndata = {'data': {'avatar': 'http://imagev2.test.ximalaya.com:8080/storages/6479-audiotest/E8/94/CAoVXrsEKku5AAEkuQAAM3wd.jpg!....xmcdn.com/lib/enterprise-user-admin/last/css/img/logo-qxt.png', 'name': '测试昵称', ...}, ...], ...}, 'msg': '', 'ret': 0}\n_path = '/Users/nali/AutoApiTest/tests/CommonApi/loginApi'\nrelevance = {'sign_h5_login': 'F017A0CD674A8B7A4F52B56898D78E6A'}\n\n    def check_result(test_name, case, code, data, _path, relevance=None):\n        \"\"\"\n        校验测试结果\n        :param test_name: 测试名称\n        :param case: 测试用例中check字段，默认为dict\n        :param code: HTTP状态\n        :param data: 返回的接口json数据\n        :param relevance: 关联值对象\n        :param _path: case路径\n        :return:\n        \"\"\"\n        # 不校验结果\n        print(case[\"check_type\"])\n        if case[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n    \n        # json格式校验\n        if case[\"check_type\"] == 'json':\n            expected_result = case[\"expected_result\"]\n            if isinstance(case[\"expected_result\"], str):\n                expected_result = read_param(test_name, expected_result, _path, relevance)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(expected_result), '期望data')\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if int(code) == case[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                check_json(expected_result, data)\n            else:\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 只校验状态码\n        elif case[\"check_type\"] == 'only_check_status':\n            with allure.step(\"校验HTTP状态\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if code == case[\"expected_code\"]:\n                pass\n            else:\n                print(code)\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 完全校验\n        # elif case[\"check_type\"] == 'entirely_check':\n        #     expected_result = case[\"expected_result\"]\n        #     if isinstance(case[\"expected_result\"], str):\n        #         expected_result = read_json(test_name, expected_result, _path, relevance)\n        #     # with allure.step(\"完全校验结果\"):\n        #     #     allure.attach(\"期望code\", str(case[\"expected_code\"]))\n        #     #     allure.attach('期望data', str(expected_result))\n        #     #     allure.attach(\"实际code\", str(code))\n        #     #     allure.attach('实际data', str(data.yaml))\n        #     if int(code) == case[\"expected_code\"]:\n        #         result = operator.eq(expected_result, data.yaml)\n        #         if result:\n        #             pass\n        #         else:\n        #             raise Exception(\"完全校验失败！ {0} ! = {1}\".format(expected_result, data.yaml))\n        #     else:\n        #         raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 正则校验\n        elif case[\"check_type\"] == 'Regular_check':\n            if int(code) == case[\"expected_code\"]:\n                try:\n                    result = \"\"\n                    if isinstance(case[\"expected_result\"], list):\n                        with allure.step(\"正则校验\"):\n                            for i in case[\"expected_result\"]:\n                                # 替换用例中关联关系\n                                re_i = single_replace(i, relevance)\n                                result = re.findall(re_i.replace(\"\\\"\", \"\\'\"), str(data))\n                                allure.attach(str(result),'正则校验结果\\n')\n                            allure.attach(str(data),'实际data')\n                    else:\n                        result = re.findall(case[\"expected_result\"].replace(\"\\\"\", \"\\'\"), str(data))\n                        with allure.step(\"正则校验\"):\n                            allure.attach(\"期望code\", str(case[\"expected_code\"]))\n                            allure.attach('正则表达式', str(case[\"expected_result\"]).replace(\"\\'\", \"\\\"\"))\n                            allure.attach(\"实际code\", str(code))\n                            allure.attach('实际data', str(data))\n                            allure.attach(case[\"expected_result\"].replace(\"\\\"\", \"\\'\") + '校验完成结果',\n                                          str(result).replace(\"\\'\", \"\\\"\"))\n                    if not result:\n                        raise Exception(\"正则未校验到内容！ {}\".format(case[\"expected_result\"]))\n                except KeyError:\n                    raise Exception(\"正则校验执行失败！ {}\\n正则表达式为空时\".format(case[\"expected_result\"]))\n            else:\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 数据库校验\n        # elif case[\"check_type\"] == \"datebase_check\":\n        #     pass\n    \n        else:\n>           raise Exception(\"无该校验方式：{}\".format(case[\"check_type\"]))\nE           Exception: 无该校验方式：no_check\n\n/Users/nali/AutoApiTest/common/unit/check_result.py:129: Exception",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ed22a3a2b209f51b",
      "name" : "log",
      "source" : "ed22a3a2b209f51b.txt",
      "type" : "text/plain",
      "size" : 80
    }, {
      "uid" : "d463e9ddd272f0b7",
      "name" : "stdout",
      "source" : "d463e9ddd272f0b7.txt",
      "type" : "text/plain",
      "size" : 21244
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "info"
  }, {
    "name" : "parentSuite",
    "value" : "tests.TestScript.infoApi"
  }, {
    "name" : "suite",
    "value" : "test_info"
  }, {
    "name" : "subSuite",
    "value" : "TestPremise"
  }, {
    "name" : "host",
    "value" : "anqidediannao.local"
  }, {
    "name" : "thread",
    "value" : "75951-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.TestScript.infoApi.test_info"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case_data",
    "value" : "None"
  }, {
    "name" : "login",
    "value" : "{'test_name': 'login_h5', 'info': '密码登录m站', 'is_run': None, 'host': '${HOST1}$', 'headers': '${headers1}$', 'address': '/passport/api/pwdLogin', 'http_type': 'https', 'request_type': 'post_cookie', 'parameter_type': 'data', 'parameter': {'passport': 17521200974, 'password': 'anqi666', 'passportType': 1, 'sign': 'F017A0CD674A8B7A4F52B56898D78E6A'}, 'timeout': 10, 'cookies': False, 'check': {'expected_result': None, 'check_type': 'no_check', 'expected_code': None}, 'file': False, 'global_relevance': None, 'relevance': None}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "a0e35509bdfebad0.json",
  "parameterValues" : [ "None", "{'test_name': 'login_h5', 'info': '密码登录m站', 'is_run': None, 'host': '${HOST1}$', 'headers': '${headers1}$', 'address': '/passport/api/pwdLogin', 'http_type': 'https', 'request_type': 'post_cookie', 'parameter_type': 'data', 'parameter': {'passport': 17521200974, 'password': 'anqi666', 'passportType': 1, 'sign': 'F017A0CD674A8B7A4F52B56898D78E6A'}, 'timeout': 10, 'cookies': False, 'check': {'expected_result': None, 'check_type': 'no_check', 'expected_code': None}, 'file': False, 'global_relevance': None, 'relevance': None}" ]
}