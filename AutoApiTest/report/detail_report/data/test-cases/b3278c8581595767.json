{
  "uid" : "b3278c8581595767",
  "name" : "test_case[login0-case_data0]",
  "fullName" : "tests.TestScript.pageApi.test_page.TestPage#test_case",
  "historyId" : "eb334c558b3408a2ad136d8fece96b42",
  "time" : {
    "start" : 1618288571619,
    "stop" : 1618288572373,
    "duration" : 754
  },
  "status" : "broken",
  "statusMessage" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <test_page.TestPage object at 0x11b2a24a8>\ncase_data = {'check': {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"pageId\": \"${pageId}$\"']}, 'cookies': True, 'file': False, 'global_relevance': None, ...}\nsetupClass = {}\n\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"product_version\"] in product_version,\n                        reason=\"该用例所属版本为：{0}，在本次排除版本{1}内\".format(case_dict[\"test_info\"][\"product_version\"],\n                                                                 product_version))\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"case_level\"] not in case_level,\n                        reason=\"该用例的用例等级为：{0}，不在本次运行级别{1}内\".format(case_dict[\"test_info\"][\"case_level\"], case_level))\n    # @pytest.mark.run(order=case_dict[\"test_info\"][\"run_order\"])\n    @allure.severity(case_dict[\"test_info\"][\"case_level\"])\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"page\")\n    def test_case(self, case_data, setupClass):\n        self.relevance = setupTest(relevance_path, case_data, setupClass)\n>       api_send_check(case_data, case_dict, case_path, self.relevance)\n\n/Users/nali/AutoApiTest/tests/TestScript/pageApi/test_page.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/nali/AutoApiTest/common/unit/api_send_check.py:28: in api_send_check\n    res = api_send.api_send(case_data, case_dict, case_path, relevance)\n/Users/nali/AutoApiTest/common/unit/api_send.py:125: in api_send\n    cookie=cookie)\n/Users/nali/AutoApiTest/common/unit/api_method.py:75: in get\n    return response.status_code, response.json()\n/Users/nali/anaconda3/lib/python3.7/site-packages/requests/models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\n/Users/nali/anaconda3/lib/python3.7/json/__init__.py:348: in loads\n    return _default_decoder.decode(s)\n/Users/nali/anaconda3/lib/python3.7/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x10b0179e8>\ns = '<!DOCTYPE html>\\n<html>\\n<head>\\n  <meta charset=\"utf-8\">\\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\\n ...d>\\n<body>\\n<div class=\"err-wrapper\">\\n  <i class=\"err-img\"></i>\\n      <p>出错啦！请稍后重试</p>\\n  </div>\\n</body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Users/nali/anaconda3/lib/python3.7/json/decoder.py:355: JSONDecodeError",
  "flaky" : true,
  "beforeStages" : [ {
    "name" : "setupClass",
    "time" : {
      "start" : 1618288571598,
      "stop" : 1618288571599,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "login",
    "time" : {
      "start" : 1618288569900,
      "stop" : 1618288570159,
      "duration" : 259
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "POST请求接口",
      "time" : {
        "start" : 1618288569908,
        "stop" : 1618288569915,
        "duration" : 7
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "f2b4bf60ee8fbfe1",
        "name" : "请求接口：",
        "source" : "f2b4bf60ee8fbfe1.attach",
        "type" : "text/plain",
        "size" : 8
      }, {
        "uid" : "7bca45ba9adcb491",
        "name" : "用例描述：",
        "source" : "7bca45ba9adcb491.attach",
        "type" : "text/plain",
        "size" : 16
      }, {
        "uid" : "372b26a47f80597a",
        "name" : "请求地址",
        "source" : "372b26a47f80597a.attach",
        "type" : "text/plain",
        "size" : 54
      }, {
        "uid" : "8df4e903d393f5b9",
        "name" : "请求头",
        "source" : "8df4e903d393f5b9.attach",
        "type" : "text/plain",
        "size" : 68
      }, {
        "uid" : "bc0f94977719ede1",
        "name" : "请求参数",
        "source" : "bc0f94977719ede1.attach",
        "type" : "text/plain",
        "size" : 111
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 5,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "不校验结果",
      "time" : {
        "start" : 1618288570158,
        "stop" : 1618288570158,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "关联值写入关联池文件",
      "time" : {
        "start" : 1618288570158,
        "stop" : 1618288570159,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "114ee260436108d7",
        "name" : "接口中获取的关联值",
        "source" : "114ee260436108d7.attach",
        "type" : "text/plain",
        "size" : 4
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 6,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <test_page.TestPage object at 0x11b2a24a8>\ncase_data = {'check': {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"pageId\": \"${pageId}$\"']}, 'cookies': True, 'file': False, 'global_relevance': None, ...}\nsetupClass = {}\n\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"product_version\"] in product_version,\n                        reason=\"该用例所属版本为：{0}，在本次排除版本{1}内\".format(case_dict[\"test_info\"][\"product_version\"],\n                                                                 product_version))\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"case_level\"] not in case_level,\n                        reason=\"该用例的用例等级为：{0}，不在本次运行级别{1}内\".format(case_dict[\"test_info\"][\"case_level\"], case_level))\n    # @pytest.mark.run(order=case_dict[\"test_info\"][\"run_order\"])\n    @allure.severity(case_dict[\"test_info\"][\"case_level\"])\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"page\")\n    def test_case(self, case_data, setupClass):\n        self.relevance = setupTest(relevance_path, case_data, setupClass)\n>       api_send_check(case_data, case_dict, case_path, self.relevance)\n\n/Users/nali/AutoApiTest/tests/TestScript/pageApi/test_page.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/nali/AutoApiTest/common/unit/api_send_check.py:28: in api_send_check\n    res = api_send.api_send(case_data, case_dict, case_path, relevance)\n/Users/nali/AutoApiTest/common/unit/api_send.py:125: in api_send\n    cookie=cookie)\n/Users/nali/AutoApiTest/common/unit/api_method.py:75: in get\n    return response.status_code, response.json()\n/Users/nali/anaconda3/lib/python3.7/site-packages/requests/models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\n/Users/nali/anaconda3/lib/python3.7/json/__init__.py:348: in loads\n    return _default_decoder.decode(s)\n/Users/nali/anaconda3/lib/python3.7/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x10b0179e8>\ns = '<!DOCTYPE html>\\n<html>\\n<head>\\n  <meta charset=\"utf-8\">\\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\\n ...d>\\n<body>\\n<div class=\"err-wrapper\">\\n  <i class=\"err-img\"></i>\\n      <p>出错啦！请稍后重试</p>\\n  </div>\\n</body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Users/nali/anaconda3/lib/python3.7/json/decoder.py:355: JSONDecodeError",
    "steps" : [ {
      "name" : "get请求接口",
      "time" : {
        "start" : 1618288571626,
        "stop" : 1618288571629,
        "duration" : 3
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "a946be926cedb3ce",
        "name" : "请求接口：",
        "source" : "a946be926cedb3ce.attach",
        "type" : "text/plain",
        "size" : 6
      }, {
        "uid" : "ffb0aaa8e00da7c1",
        "name" : "用例描述：",
        "source" : "ffb0aaa8e00da7c1.attach",
        "type" : "text/plain",
        "size" : 12
      }, {
        "uid" : "193defed36504faa",
        "name" : "请求地址",
        "source" : "193defed36504faa.attach",
        "type" : "text/plain",
        "size" : 40
      }, {
        "uid" : "2e4df095c43f8c6c",
        "name" : "请求头",
        "source" : "2e4df095c43f8c6c.attach",
        "type" : "text/plain",
        "size" : 68
      }, {
        "uid" : "543a99703decc1c8",
        "name" : "请求参数",
        "source" : "543a99703decc1c8.attach",
        "type" : "text/plain",
        "size" : 36
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 5,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "773192b7a9b0322d",
      "name" : "log",
      "source" : "773192b7a9b0322d.txt",
      "type" : "text/plain",
      "size" : 1270
    }, {
      "uid" : "2bac03478892c308",
      "name" : "stdout",
      "source" : "2bac03478892c308.txt",
      "type" : "text/plain",
      "size" : 1062
    } ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 7,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "login::0",
    "time" : {
      "start" : 1618288572652,
      "stop" : 1618288572653,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "story",
    "value" : "page"
  }, {
    "name" : "feature",
    "value" : "page"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.skipif(False, reason='该用例的用例等级为：blocker，不在本次运行级别['blocker', 'critical', 'normal', 'minor']内')"
  }, {
    "name" : "parentSuite",
    "value" : "tests.TestScript.pageApi"
  }, {
    "name" : "suite",
    "value" : "test_page"
  }, {
    "name" : "subSuite",
    "value" : "TestPage"
  }, {
    "name" : "host",
    "value" : "anqidediannao.local"
  }, {
    "name" : "thread",
    "value" : "8800-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.TestScript.pageApi.test_page"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case_data",
    "value" : "{'test_name': 'page_1', 'info': '频道数据', 'is_run': None, 'request_type': 'get', 'parameter_type': 'data', 'parameter': {'pageId': '${pageId}$', 'pageSource': '${pageSource}$'}, 'cookies': True, 'timeout': 10, 'check': {'expected_result': ['\"pageId\": \"${pageId}$\"'], 'check_type': 'Regular_check', 'expected_code': 200}, 'file': False, 'global_relevance': None, 'relevance': None}"
  }, {
    "name" : "login",
    "value" : "{'test_name': 'login_h5', 'info': '密码登录m站', 'is_run': None, 'host': '${HOST1}$', 'headers': '${headers1}$', 'address': '/passport/api/pwdLogin', 'http_type': 'https', 'request_type': 'post_cookie', 'parameter_type': 'data', 'parameter': {'passport': 17521200974, 'password': 'anqi666', 'passportType': 1, 'sign': 'F017A0CD674A8B7A4F52B56898D78E6A'}, 'timeout': 10, 'cookies': False, 'check': {'expected_result': None, 'check_type': 'no_check', 'expected_code': None}, 'file': False, 'global_relevance': None, 'relevance': None}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "blocker",
    "retries" : [ {
      "uid" : "24d30a12d2c2e3c6",
      "status" : "broken",
      "statusDetails" : "AttributeError: module 'allure' has no attribute 'environment'",
      "time" : {
        "start" : 1618288546394,
        "stop" : 1618288546394,
        "duration" : 0
      }
    }, {
      "uid" : "7b340e8e108ad343",
      "status" : "broken",
      "statusDetails" : "AttributeError: module 'allure' has no attribute 'environment'",
      "time" : {
        "start" : 1617807207278,
        "stop" : 1617807207278,
        "duration" : 0
      }
    }, {
      "uid" : "82dc51971f6a77fc",
      "status" : "broken",
      "statusDetails" : "AttributeError: module 'allure' has no attribute 'environment'",
      "time" : {
        "start" : 1617806989976,
        "stop" : 1617806989976,
        "duration" : 0
      }
    }, {
      "uid" : "539d7e793bbc76f1",
      "status" : "broken",
      "statusDetails" : "requests.exceptions.ConnectionError: [Errno 0] Error",
      "time" : {
        "start" : 1617805033322,
        "stop" : 1617805033351,
        "duration" : 29
      }
    }, {
      "uid" : "301a233e13770d06",
      "status" : "broken",
      "statusDetails" : "FileNotFoundError: [Errno 2] No such file or directory: '/Users/nali/AutoApiTest/config'",
      "time" : {
        "start" : 1617802197944,
        "stop" : 1617802197944,
        "duration" : 0
      }
    }, {
      "uid" : "c15fffa35580d9f9",
      "status" : "broken",
      "statusDetails" : "FileNotFoundError: [Errno 2] No such file or directory: '/Users/nali/AutoApiTest/config'",
      "time" : {
        "start" : 1617802162150,
        "stop" : 1617802162150,
        "duration" : 0
      }
    }, {
      "uid" : "d47dafcf0202236a",
      "status" : "broken",
      "statusDetails" : "FileNotFoundError: [Errno 2] No such file or directory: '/Users/nali/AutoApiTest/config'",
      "time" : {
        "start" : 1617801448825,
        "stop" : 1617801448825,
        "duration" : 0
      }
    }, {
      "uid" : "66e67ee9bca4dfa8",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
      "time" : {
        "start" : 1617639003076,
        "stop" : 1617639003246,
        "duration" : 170
      }
    }, {
      "uid" : "e65f03c256385449",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
      "time" : {
        "start" : 1617638650504,
        "stop" : 1617638650651,
        "duration" : 147
      }
    }, {
      "uid" : "72f8a6b6d7ca9d5b",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
      "time" : {
        "start" : 1617638455213,
        "stop" : 1617638455387,
        "duration" : 174
      }
    }, {
      "uid" : "c7ef1d079e2cb213",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
      "time" : {
        "start" : 1617638335455,
        "stop" : 1617638335613,
        "duration" : 158
      }
    }, {
      "uid" : "e31bac9d599d3b84",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
      "time" : {
        "start" : 1617638174426,
        "stop" : 1617638174602,
        "duration" : 176
      }
    }, {
      "uid" : "d0f561063260f998",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
      "time" : {
        "start" : 1617638002474,
        "stop" : 1617638002646,
        "duration" : 172
      }
    }, {
      "uid" : "9ccd62d4dc290fb4",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
      "time" : {
        "start" : 1617637940251,
        "stop" : 1617637940466,
        "duration" : 215
      }
    }, {
      "uid" : "b3d45ec8c7054aa4",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
      "time" : {
        "start" : 1617637776361,
        "stop" : 1617637776505,
        "duration" : 144
      }
    }, {
      "uid" : "9ed0c48349b68913",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
      "time" : {
        "start" : 1617636893486,
        "stop" : 1617636893705,
        "duration" : 219
      }
    }, {
      "uid" : "30583bb0c18675ef",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
      "time" : {
        "start" : 1617636753502,
        "stop" : 1617636753716,
        "duration" : 214
      }
    }, {
      "uid" : "3cb90c2d79d0e39c",
      "status" : "broken",
      "statusDetails" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
      "time" : {
        "start" : 1617635947142,
        "stop" : 1617635947361,
        "duration" : 219
      }
    }, {
      "uid" : "f944a9747eadfd92",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"corpId\": 43']",
      "time" : {
        "start" : 1617635705592,
        "stop" : 1617635705722,
        "duration" : 130
      }
    }, {
      "uid" : "67468d3b6695d756",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"corpId\": 43']",
      "time" : {
        "start" : 1617635418166,
        "stop" : 1617635418297,
        "duration" : 131
      }
    }, {
      "uid" : "5b995a57e9614647",
      "status" : "broken",
      "statusDetails" : "TypeError: can only concatenate str (not \"NoneType\") to str",
      "time" : {
        "start" : 1617635160522,
        "stop" : 1617635160527,
        "duration" : 5
      }
    }, {
      "uid" : "9263cd78a4a765ba",
      "status" : "broken",
      "statusDetails" : "TypeError: can only concatenate str (not \"NoneType\") to str",
      "time" : {
        "start" : 1617633207728,
        "stop" : 1617633207733,
        "duration" : 5
      }
    }, {
      "uid" : "e77fc2f7172d006a",
      "status" : "broken",
      "statusDetails" : "AttributeError: 'SubRequest' object has no attribute 'params'",
      "time" : {
        "start" : 1617633164674,
        "stop" : 1617633164674,
        "duration" : 0
      }
    }, {
      "uid" : "57c9f04fc7ddff6",
      "status" : "broken",
      "statusDetails" : "TypeError: can only concatenate str (not \"NoneType\") to str",
      "time" : {
        "start" : 1617608531870,
        "stop" : 1617608531873,
        "duration" : 3
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "@pytest.mark.skipif(False, reason='该用例的用例等级为：blocker，不在本次运行级别['blocker', 'critical', 'normal', 'minor']内')" ]
  },
  "source" : "b3278c8581595767.json",
  "parameterValues" : [ "{'test_name': 'page_1', 'info': '频道数据', 'is_run': None, 'request_type': 'get', 'parameter_type': 'data', 'parameter': {'pageId': '${pageId}$', 'pageSource': '${pageSource}$'}, 'cookies': True, 'timeout': 10, 'check': {'expected_result': ['\"pageId\": \"${pageId}$\"'], 'check_type': 'Regular_check', 'expected_code': 200}, 'file': False, 'global_relevance': None, 'relevance': None}", "{'test_name': 'login_h5', 'info': '密码登录m站', 'is_run': None, 'host': '${HOST1}$', 'headers': '${headers1}$', 'address': '/passport/api/pwdLogin', 'http_type': 'https', 'request_type': 'post_cookie', 'parameter_type': 'data', 'parameter': {'passport': 17521200974, 'password': 'anqi666', 'passportType': 1, 'sign': 'F017A0CD674A8B7A4F52B56898D78E6A'}, 'timeout': 10, 'cookies': False, 'check': {'expected_result': None, 'check_type': 'no_check', 'expected_code': None}, 'file': False, 'global_relevance': None, 'relevance': None}" ]
}