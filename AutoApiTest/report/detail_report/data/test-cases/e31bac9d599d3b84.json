{
  "uid" : "e31bac9d599d3b84",
  "name" : "test_case[login0-case_data0]",
  "fullName" : "tests.TestScript.pageApi.test_page.TestPage#test_case",
  "historyId" : "eb334c558b3408a2ad136d8fece96b42",
  "time" : {
    "start" : 1617638174426,
    "stop" : 1617638174602,
    "duration" : 176
  },
  "status" : "broken",
  "statusMessage" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <test_page.TestPage object at 0x11c07df60>\ncase_data = {'check': {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"pageId\": \"${pageId}$\"']}, 'cookies': True, 'file': False, 'global_relevance': None, ...}\nsetupClass = {}\n\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"product_version\"] in product_version,\n                        reason=\"该用例所属版本为：{0}，在本次排除版本{1}内\".format(case_dict[\"test_info\"][\"product_version\"],\n                                                                 product_version))\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"case_level\"] not in case_level,\n                        reason=\"该用例的用例等级为：{0}，不在本次运行级别{1}内\".format(case_dict[\"test_info\"][\"case_level\"], case_level))\n    # @pytest.mark.run(order=case_dict[\"test_info\"][\"run_order\"])\n    @allure.severity(case_dict[\"test_info\"][\"case_level\"])\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"page\")\n    def test_case(self, case_data, setupClass):\n        self.relevance = setupTest(relevance_path, case_data, setupClass)\n>       api_send_check(case_data, case_dict, case_path, self.relevance)\n\n/Users/nali/AutoApiTest/tests/TestScript/pageApi/test_page.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/nali/AutoApiTest/common/unit/api_send_check.py:26: in api_send_check\n    res = api_send.api_send(case_data, case_dict, case_path, relevance)\n/Users/nali/AutoApiTest/common/unit/api_send.py:125: in api_send\n    cookie=cookie)\n/Users/nali/AutoApiTest/common/unit/api_method.py:75: in get\n    return response.status_code, response.json()\n/Users/nali/anaconda3/lib/python3.7/site-packages/requests/models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\n/Users/nali/anaconda3/lib/python3.7/json/__init__.py:348: in loads\n    return _default_decoder.decode(s)\n/Users/nali/anaconda3/lib/python3.7/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x10cab1550>\ns = '<!DOCTYPE html>\\n<html>\\n<head>\\n  <meta charset=\"utf-8\">\\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\\n ...d>\\n<body>\\n<div class=\"err-wrapper\">\\n  <i class=\"err-img\"></i>\\n      <p>出错啦！请稍后重试</p>\\n  </div>\\n</body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Users/nali/anaconda3/lib/python3.7/json/decoder.py:355: JSONDecodeError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "setupClass",
    "time" : {
      "start" : 1617638174420,
      "stop" : 1617638174420,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "login",
    "time" : {
      "start" : 1617638172536,
      "stop" : 1617638172819,
      "duration" : 283
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "POST请求接口",
      "time" : {
        "start" : 1617638172547,
        "stop" : 1617638172549,
        "duration" : 2
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "590367887944c081",
        "name" : "请求接口：",
        "source" : "590367887944c081.attach",
        "type" : "text/plain",
        "size" : 8
      }, {
        "uid" : "d9ee130ab619ea4f",
        "name" : "用例描述：",
        "source" : "d9ee130ab619ea4f.attach",
        "type" : "text/plain",
        "size" : 16
      }, {
        "uid" : "e9451041e13db00d",
        "name" : "请求地址",
        "source" : "e9451041e13db00d.attach",
        "type" : "text/plain",
        "size" : 54
      }, {
        "uid" : "1f3c3a5205667f33",
        "name" : "请求头",
        "source" : "1f3c3a5205667f33.attach",
        "type" : "text/plain",
        "size" : 68
      }, {
        "uid" : "241c622bf9ffb731",
        "name" : "请求参数",
        "source" : "241c622bf9ffb731.attach",
        "type" : "text/plain",
        "size" : 111
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 5,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "不校验结果",
      "time" : {
        "start" : 1617638172818,
        "stop" : 1617638172818,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "关联值写入关联池文件",
      "time" : {
        "start" : 1617638172818,
        "stop" : 1617638172818,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "cda0892207745b92",
        "name" : "接口中获取的关联值",
        "source" : "cda0892207745b92.attach",
        "type" : "text/plain",
        "size" : 4
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 6,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <test_page.TestPage object at 0x11c07df60>\ncase_data = {'check': {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"pageId\": \"${pageId}$\"']}, 'cookies': True, 'file': False, 'global_relevance': None, ...}\nsetupClass = {}\n\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"product_version\"] in product_version,\n                        reason=\"该用例所属版本为：{0}，在本次排除版本{1}内\".format(case_dict[\"test_info\"][\"product_version\"],\n                                                                 product_version))\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"case_level\"] not in case_level,\n                        reason=\"该用例的用例等级为：{0}，不在本次运行级别{1}内\".format(case_dict[\"test_info\"][\"case_level\"], case_level))\n    # @pytest.mark.run(order=case_dict[\"test_info\"][\"run_order\"])\n    @allure.severity(case_dict[\"test_info\"][\"case_level\"])\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"page\")\n    def test_case(self, case_data, setupClass):\n        self.relevance = setupTest(relevance_path, case_data, setupClass)\n>       api_send_check(case_data, case_dict, case_path, self.relevance)\n\n/Users/nali/AutoApiTest/tests/TestScript/pageApi/test_page.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/nali/AutoApiTest/common/unit/api_send_check.py:26: in api_send_check\n    res = api_send.api_send(case_data, case_dict, case_path, relevance)\n/Users/nali/AutoApiTest/common/unit/api_send.py:125: in api_send\n    cookie=cookie)\n/Users/nali/AutoApiTest/common/unit/api_method.py:75: in get\n    return response.status_code, response.json()\n/Users/nali/anaconda3/lib/python3.7/site-packages/requests/models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\n/Users/nali/anaconda3/lib/python3.7/json/__init__.py:348: in loads\n    return _default_decoder.decode(s)\n/Users/nali/anaconda3/lib/python3.7/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x10cab1550>\ns = '<!DOCTYPE html>\\n<html>\\n<head>\\n  <meta charset=\"utf-8\">\\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\\n ...d>\\n<body>\\n<div class=\"err-wrapper\">\\n  <i class=\"err-img\"></i>\\n      <p>出错啦！请稍后重试</p>\\n  </div>\\n</body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Users/nali/anaconda3/lib/python3.7/json/decoder.py:355: JSONDecodeError",
    "steps" : [ {
      "name" : "get请求接口",
      "time" : {
        "start" : 1617638174429,
        "stop" : 1617638174432,
        "duration" : 3
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "dad2e40da0ddbc36",
        "name" : "请求接口：",
        "source" : "dad2e40da0ddbc36.attach",
        "type" : "text/plain",
        "size" : 6
      }, {
        "uid" : "6c0e198f5100d9bd",
        "name" : "用例描述：",
        "source" : "6c0e198f5100d9bd.attach",
        "type" : "text/plain",
        "size" : 12
      }, {
        "uid" : "f70c6a019b0385c4",
        "name" : "请求地址",
        "source" : "f70c6a019b0385c4.attach",
        "type" : "text/plain",
        "size" : 40
      }, {
        "uid" : "ef912c0e9cf94784",
        "name" : "请求头",
        "source" : "ef912c0e9cf94784.attach",
        "type" : "text/plain",
        "size" : 68
      }, {
        "uid" : "742e2890f0ddf4cf",
        "name" : "请求参数",
        "source" : "742e2890f0ddf4cf.attach",
        "type" : "text/plain",
        "size" : 36
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 5,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "b548016e1639d402",
      "name" : "log",
      "source" : "b548016e1639d402.txt",
      "type" : "text/plain",
      "size" : 957
    }, {
      "uid" : "ced5e37052dc8df3",
      "name" : "stdout",
      "source" : "ced5e37052dc8df3.txt",
      "type" : "text/plain",
      "size" : 1057
    } ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 7,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "login::0",
    "time" : {
      "start" : 1617638174906,
      "stop" : 1617638174906,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "story",
    "value" : "page"
  }, {
    "name" : "feature",
    "value" : "page"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.skipif(False, reason='该用例的用例等级为：blocker，不在本次运行级别['blocker', 'critical', 'normal', 'minor']内')"
  }, {
    "name" : "parentSuite",
    "value" : "tests.TestScript.pageApi"
  }, {
    "name" : "suite",
    "value" : "test_page"
  }, {
    "name" : "subSuite",
    "value" : "TestPage"
  }, {
    "name" : "host",
    "value" : "anqidediannao.local"
  }, {
    "name" : "thread",
    "value" : "19944-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.TestScript.pageApi.test_page"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case_data",
    "value" : "{'test_name': 'page_1', 'info': '频道数据', 'is_run': None, 'request_type': 'get', 'parameter_type': 'data', 'parameter': {'pageId': '${pageId}$', 'pageSource': '${pageSource}$'}, 'cookies': True, 'timeout': 10, 'check': {'expected_result': ['\"pageId\": \"${pageId}$\"'], 'check_type': 'Regular_check', 'expected_code': 200}, 'file': False, 'global_relevance': None, 'relevance': None}"
  }, {
    "name" : "login",
    "value" : "{'test_name': 'login_h5', 'info': '密码登录m站', 'is_run': None, 'host': '${HOST1}$', 'headers': '${headers1}$', 'address': '/passport/api/pwdLogin', 'http_type': 'https', 'request_type': 'post_cookie', 'parameter_type': 'data', 'parameter': {'passport': 17521200974, 'password': 'anqi666', 'passportType': 1, 'sign': 'F017A0CD674A8B7A4F52B56898D78E6A'}, 'timeout': 10, 'cookies': False, 'check': {'expected_result': None, 'check_type': 'no_check', 'expected_code': None}, 'file': False, 'global_relevance': None, 'relevance': None}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.skipif(False, reason='该用例的用例等级为：blocker，不在本次运行级别['blocker', 'critical', 'normal', 'minor']内')" ]
  },
  "source" : "e31bac9d599d3b84.json",
  "parameterValues" : [ "{'test_name': 'page_1', 'info': '频道数据', 'is_run': None, 'request_type': 'get', 'parameter_type': 'data', 'parameter': {'pageId': '${pageId}$', 'pageSource': '${pageSource}$'}, 'cookies': True, 'timeout': 10, 'check': {'expected_result': ['\"pageId\": \"${pageId}$\"'], 'check_type': 'Regular_check', 'expected_code': 200}, 'file': False, 'global_relevance': None, 'relevance': None}", "{'test_name': 'login_h5', 'info': '密码登录m站', 'is_run': None, 'host': '${HOST1}$', 'headers': '${headers1}$', 'address': '/passport/api/pwdLogin', 'http_type': 'https', 'request_type': 'post_cookie', 'parameter_type': 'data', 'parameter': {'passport': 17521200974, 'password': 'anqi666', 'passportType': 1, 'sign': 'F017A0CD674A8B7A4F52B56898D78E6A'}, 'timeout': 10, 'cookies': False, 'check': {'expected_result': None, 'check_type': 'no_check', 'expected_code': None}, 'file': False, 'global_relevance': None, 'relevance': None}" ]
}