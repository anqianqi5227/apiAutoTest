{
  "uid" : "f24443ca8950a38",
  "name" : "test_case[case_data0]",
  "fullName" : "tests.TestScript.configsAPI.test_configs.TestConfigs#test_case",
  "historyId" : "d8d925246c1fec44edb81b2b419d34e8",
  "time" : {
    "start" : 1617631086820,
    "stop" : 1617631086989,
    "duration" : 169
  },
  "status" : "broken",
  "statusMessage" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
  "statusTrace" : "self = <test_configs.TestConfigs object at 0x12339ef28>\ncase_data = {'case_id': 1, 'check': {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"ret\": 0']}, 'cookies': True, 'global_relevance': None, ...}\nsetupClass = {}\n\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"product_version\"] in product_version,\n                        reason=\"该用例所属版本为：{0}，在本次排除版本{1}内\".format(case_dict[\"test_info\"][\"product_version\"],\n                                                                 product_version))\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"case_level\"] not in case_level,\n                        reason=\"该用例的用例等级为：{0}，不在本次运行级别{1}内\".format(case_dict[\"test_info\"][\"case_level\"], case_level))\n    # @pytest.mark.run(order=case_dict[\"test_info\"][\"run_order\"])\n    @allure.severity(case_dict[\"test_info\"][\"case_level\"])\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"configs\")\n    def test_case(self, case_data, setupClass):\n        self.relevance = setupTest(relevance_path, case_data, setupClass)\n>       api_send_check(case_data, case_dict, case_path, self.relevance)\n\n/Users/nali/AutoApiTest/tests/TestScript/configsAPI/test_configs.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/nali/AutoApiTest/common/unit/api_send_check.py:33: in api_send_check\n    check_result.check_result(test_name, check_data, code, data, case_path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_name = 'configs_1'\ncase = {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"ret\": 0']}\ncode = 200, data = {'data': {}, 'msg': '未登录', 'ret': -10}\n_path = '/Users/nali/AutoApiTest/tests/TestCases/configsApi'\nrelevance = {'corpCode': 'p1u5Es8yX98', 'corpId': 43, 'uid': 239283, 'uidCode': '_GAQsTvZuwo'}\n\n    def check_result(test_name, case, code, data, _path, relevance=None):\n        \"\"\"\n        校验测试结果\n        :param test_name: 测试名称\n        :param case: 测试用例中check字段，默认为dict\n        :param code: HTTP状态\n        :param data: 返回的接口json数据\n        :param relevance: 关联值对象\n        :param _path: case路径\n        :return:\n        \"\"\"\n        # 不校验结果\n        print(case[\"check_type\"])\n        if case[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n    \n        # json格式校验\n        elif case[\"check_type\"] == 'json':\n            expected_result = case[\"expected_result\"]\n            if isinstance(case[\"expected_result\"], str):\n                expected_result = read_param(test_name, expected_result, _path, relevance)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(expected_result), '期望data')\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if int(code) == case[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                check_json(expected_result, data)\n            else:\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 只校验状态码\n        elif case[\"check_type\"] == 'only_check_status':\n            with allure.step(\"校验HTTP状态\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if code == case[\"expected_code\"]:\n                pass\n            else:\n                print(code)\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 完全校验\n        # elif case[\"check_type\"] == 'entirely_check':\n        #     expected_result = case[\"expected_result\"]\n        #     if isinstance(case[\"expected_result\"], str):\n        #         expected_result = read_json(test_name, expected_result, _path, relevance)\n        #     # with allure.step(\"完全校验结果\"):\n        #     #     allure.attach(\"期望code\", str(case[\"expected_code\"]))\n        #     #     allure.attach('期望data', str(expected_result))\n        #     #     allure.attach(\"实际code\", str(code))\n        #     #     allure.attach('实际data', str(data.yaml))\n        #     if int(code) == case[\"expected_code\"]:\n        #         result = operator.eq(expected_result, data.yaml)\n        #         if result:\n        #             pass\n        #         else:\n        #             raise Exception(\"完全校验失败！ {0} ! = {1}\".format(expected_result, data.yaml))\n        #     else:\n        #         raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 正则校验\n        elif case[\"check_type\"] == 'Regular_check':\n            if int(code) == case[\"expected_code\"]:\n                try:\n                    result = \"\"\n                    if isinstance(case[\"expected_result\"], list):\n                        with allure.step(\"正则校验\"):\n                            for i in case[\"expected_result\"]:\n                                # 替换用例中关联关系\n                                re_i = single_replace(i, relevance)\n                                result = re.findall(re_i.replace(\"\\\"\", \"\\'\"), str(data))\n                                allure.attach(str(result),'正则校验结果\\n')\n                            allure.attach(str(data),'实际data')\n                    else:\n                        result = re.findall(case[\"expected_result\"].replace(\"\\\"\", \"\\'\"), str(data))\n                        with allure.step(\"正则校验\"):\n                            allure.attach(\"期望code\", str(case[\"expected_code\"]))\n                            allure.attach('正则表达式', str(case[\"expected_result\"]).replace(\"\\'\", \"\\\"\"))\n                            allure.attach(\"实际code\", str(code))\n                            allure.attach('实际data', str(data))\n                            allure.attach(case[\"expected_result\"].replace(\"\\\"\", \"\\'\") + '校验完成结果',\n                                          str(result).replace(\"\\'\", \"\\\"\"))\n                    if not result:\n>                       raise Exception(\"正则未校验到内容！ {}\".format(case[\"expected_result\"]))\nE                       Exception: 正则未校验到内容！ ['\"ret\": 0']\n\n/Users/nali/AutoApiTest/common/unit/check_result.py:118: Exception",
  "flaky" : true,
  "beforeStages" : [ {
    "name" : "setupClass",
    "time" : {
      "start" : 1617631086800,
      "stop" : 1617631086801,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
    "statusTrace" : "self = <test_configs.TestConfigs object at 0x12339ef28>\ncase_data = {'case_id': 1, 'check': {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"ret\": 0']}, 'cookies': True, 'global_relevance': None, ...}\nsetupClass = {}\n\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"product_version\"] in product_version,\n                        reason=\"该用例所属版本为：{0}，在本次排除版本{1}内\".format(case_dict[\"test_info\"][\"product_version\"],\n                                                                 product_version))\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"case_level\"] not in case_level,\n                        reason=\"该用例的用例等级为：{0}，不在本次运行级别{1}内\".format(case_dict[\"test_info\"][\"case_level\"], case_level))\n    # @pytest.mark.run(order=case_dict[\"test_info\"][\"run_order\"])\n    @allure.severity(case_dict[\"test_info\"][\"case_level\"])\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"configs\")\n    def test_case(self, case_data, setupClass):\n        self.relevance = setupTest(relevance_path, case_data, setupClass)\n>       api_send_check(case_data, case_dict, case_path, self.relevance)\n\n/Users/nali/AutoApiTest/tests/TestScript/configsAPI/test_configs.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/nali/AutoApiTest/common/unit/api_send_check.py:33: in api_send_check\n    check_result.check_result(test_name, check_data, code, data, case_path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_name = 'configs_1'\ncase = {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"ret\": 0']}\ncode = 200, data = {'data': {}, 'msg': '未登录', 'ret': -10}\n_path = '/Users/nali/AutoApiTest/tests/TestCases/configsApi'\nrelevance = {'corpCode': 'p1u5Es8yX98', 'corpId': 43, 'uid': 239283, 'uidCode': '_GAQsTvZuwo'}\n\n    def check_result(test_name, case, code, data, _path, relevance=None):\n        \"\"\"\n        校验测试结果\n        :param test_name: 测试名称\n        :param case: 测试用例中check字段，默认为dict\n        :param code: HTTP状态\n        :param data: 返回的接口json数据\n        :param relevance: 关联值对象\n        :param _path: case路径\n        :return:\n        \"\"\"\n        # 不校验结果\n        print(case[\"check_type\"])\n        if case[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n    \n        # json格式校验\n        elif case[\"check_type\"] == 'json':\n            expected_result = case[\"expected_result\"]\n            if isinstance(case[\"expected_result\"], str):\n                expected_result = read_param(test_name, expected_result, _path, relevance)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(expected_result), '期望data')\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if int(code) == case[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                check_json(expected_result, data)\n            else:\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 只校验状态码\n        elif case[\"check_type\"] == 'only_check_status':\n            with allure.step(\"校验HTTP状态\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if code == case[\"expected_code\"]:\n                pass\n            else:\n                print(code)\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 完全校验\n        # elif case[\"check_type\"] == 'entirely_check':\n        #     expected_result = case[\"expected_result\"]\n        #     if isinstance(case[\"expected_result\"], str):\n        #         expected_result = read_json(test_name, expected_result, _path, relevance)\n        #     # with allure.step(\"完全校验结果\"):\n        #     #     allure.attach(\"期望code\", str(case[\"expected_code\"]))\n        #     #     allure.attach('期望data', str(expected_result))\n        #     #     allure.attach(\"实际code\", str(code))\n        #     #     allure.attach('实际data', str(data.yaml))\n        #     if int(code) == case[\"expected_code\"]:\n        #         result = operator.eq(expected_result, data.yaml)\n        #         if result:\n        #             pass\n        #         else:\n        #             raise Exception(\"完全校验失败！ {0} ! = {1}\".format(expected_result, data.yaml))\n        #     else:\n        #         raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 正则校验\n        elif case[\"check_type\"] == 'Regular_check':\n            if int(code) == case[\"expected_code\"]:\n                try:\n                    result = \"\"\n                    if isinstance(case[\"expected_result\"], list):\n                        with allure.step(\"正则校验\"):\n                            for i in case[\"expected_result\"]:\n                                # 替换用例中关联关系\n                                re_i = single_replace(i, relevance)\n                                result = re.findall(re_i.replace(\"\\\"\", \"\\'\"), str(data))\n                                allure.attach(str(result),'正则校验结果\\n')\n                            allure.attach(str(data),'实际data')\n                    else:\n                        result = re.findall(case[\"expected_result\"].replace(\"\\\"\", \"\\'\"), str(data))\n                        with allure.step(\"正则校验\"):\n                            allure.attach(\"期望code\", str(case[\"expected_code\"]))\n                            allure.attach('正则表达式', str(case[\"expected_result\"]).replace(\"\\'\", \"\\\"\"))\n                            allure.attach(\"实际code\", str(code))\n                            allure.attach('实际data', str(data))\n                            allure.attach(case[\"expected_result\"].replace(\"\\\"\", \"\\'\") + '校验完成结果',\n                                          str(result).replace(\"\\'\", \"\\\"\"))\n                    if not result:\n>                       raise Exception(\"正则未校验到内容！ {}\".format(case[\"expected_result\"]))\nE                       Exception: 正则未校验到内容！ ['\"ret\": 0']\n\n/Users/nali/AutoApiTest/common/unit/check_result.py:118: Exception",
    "steps" : [ {
      "name" : "get请求接口",
      "time" : {
        "start" : 1617631086825,
        "stop" : 1617631086828,
        "duration" : 3
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "f9aebca62791829f",
        "name" : "请求接口：",
        "source" : "f9aebca62791829f.attach",
        "type" : "text/plain",
        "size" : 9
      }, {
        "uid" : "b94a7857a0f2f631",
        "name" : "用例描述：",
        "source" : "b94a7857a0f2f631.attach",
        "type" : "text/plain",
        "size" : 21
      }, {
        "uid" : "62c89917e735dfa6",
        "name" : "请求地址",
        "source" : "62c89917e735dfa6.attach",
        "type" : "text/plain",
        "size" : 48
      }, {
        "uid" : "c19bb544bfe1b0d0",
        "name" : "请求头",
        "source" : "c19bb544bfe1b0d0.attach",
        "type" : "text/plain",
        "size" : 68
      }, {
        "uid" : "1cf07f8fb46f0dcc",
        "name" : "请求参数",
        "source" : "1cf07f8fb46f0dcc.attach",
        "type" : "text/plain",
        "size" : 4
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 5,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "正则校验",
      "time" : {
        "start" : 1617631086986,
        "stop" : 1617631086989,
        "duration" : 3
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "bb772f6a2fd82aa7",
        "name" : "正则校验结果\n",
        "source" : "bb772f6a2fd82aa7.attach",
        "type" : "text/plain",
        "size" : 2
      }, {
        "uid" : "f2157906f1190928",
        "name" : "实际data",
        "source" : "f2157906f1190928.attach",
        "type" : "text/plain",
        "size" : 44
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 2,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "a1d5098a470b0722",
      "name" : "log",
      "source" : "a1d5098a470b0722.txt",
      "type" : "text/plain",
      "size" : 154
    }, {
      "uid" : "15f86fe893fea452",
      "name" : "stdout",
      "source" : "15f86fe893fea452.txt",
      "type" : "text/plain",
      "size" : 251
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 9,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "configs"
  }, {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "story",
    "value" : "configs"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.skipif(False, reason='该用例的用例等级为：blocker，不在本次运行级别['blocker', 'critical', 'normal', 'minor']内')"
  }, {
    "name" : "parentSuite",
    "value" : "tests.TestScript.configsAPI"
  }, {
    "name" : "suite",
    "value" : "test_configs"
  }, {
    "name" : "subSuite",
    "value" : "TestConfigs"
  }, {
    "name" : "host",
    "value" : "anqidediannao.local"
  }, {
    "name" : "thread",
    "value" : "10637-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.TestScript.configsAPI.test_configs"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case_data",
    "value" : "{'test_name': 'configs_1', 'case_id': 1, 'is_run': None, 'info': '我的页配置信息', 'parameter': None, 'cookies': True, 'timeout': 10, 'check': {'expected_result': ['\"ret\": 0'], 'check_type': 'Regular_check', 'expected_code': 200}, 'global_relevance': None, 'relevance': None}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "blocker",
    "retries" : [ {
      "uid" : "158f93709638756b",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617630337248,
        "stop" : 1617630337541,
        "duration" : 293
      }
    }, {
      "uid" : "8343bacffd1c3a04",
      "status" : "passed",
      "time" : {
        "start" : 1617629451205,
        "stop" : 1617629451473,
        "duration" : 268
      }
    }, {
      "uid" : "82b578bd7dbc8cb",
      "status" : "passed",
      "time" : {
        "start" : 1617629113126,
        "stop" : 1617629113501,
        "duration" : 375
      }
    }, {
      "uid" : "1745f7a612085aeb",
      "status" : "passed",
      "time" : {
        "start" : 1617626818134,
        "stop" : 1617626819361,
        "duration" : 1227
      }
    }, {
      "uid" : "12627d9c5a3fbb92",
      "status" : "passed",
      "time" : {
        "start" : 1617614749442,
        "stop" : 1617614749644,
        "duration" : 202
      }
    }, {
      "uid" : "a4d228c3623d36",
      "status" : "broken",
      "statusDetails" : "requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='m.test.qingxuetang.com', port=443): Max retries exceeded with url: /mapi/mine/configs (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x1133cecf8>, 'Connection to m.test.qingxuetang.com timed out. (connect timeout=10)'))",
      "time" : {
        "start" : 1617614459166,
        "stop" : 1617614469219,
        "duration" : 10053
      }
    }, {
      "uid" : "1f40514c076d041a",
      "status" : "broken",
      "statusDetails" : "requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='m.test.qingxuetang.com', port=443): Max retries exceeded with url: /mapi/mine/configs (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x1181e9438>, 'Connection to m.test.qingxuetang.com timed out. (connect timeout=10)'))",
      "time" : {
        "start" : 1617614422271,
        "stop" : 1617614432292,
        "duration" : 10021
      }
    }, {
      "uid" : "3f4acd2958e51b2c",
      "status" : "passed",
      "time" : {
        "start" : 1617614383339,
        "stop" : 1617614383636,
        "duration" : 297
      }
    }, {
      "uid" : "8ef0ff4c4cc0ddbc",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617614249233,
        "stop" : 1617614249472,
        "duration" : 239
      }
    }, {
      "uid" : "ae1a066fdd92e4eb",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617613596709,
        "stop" : 1617613597070,
        "duration" : 361
      }
    }, {
      "uid" : "7af3001f0f6dff24",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617612171150,
        "stop" : 1617612171304,
        "duration" : 154
      }
    }, {
      "uid" : "66c3671e6d138bef",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617612037256,
        "stop" : 1617612037415,
        "duration" : 159
      }
    }, {
      "uid" : "a92623a0bf91dda2",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617612006074,
        "stop" : 1617612006253,
        "duration" : 179
      }
    }, {
      "uid" : "e907404a3e91b636",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617611961057,
        "stop" : 1617611961212,
        "duration" : 155
      }
    }, {
      "uid" : "16dbbdc95dc5ad0c",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617611931332,
        "stop" : 1617611931499,
        "duration" : 167
      }
    }, {
      "uid" : "56474a01f4db8927",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617611692171,
        "stop" : 1617611692307,
        "duration" : 136
      }
    }, {
      "uid" : "1c94477a0abde506",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617611619456,
        "stop" : 1617611619601,
        "duration" : 145
      }
    }, {
      "uid" : "5945fb87cae33a20",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617610942205,
        "stop" : 1617610942355,
        "duration" : 150
      }
    }, {
      "uid" : "f78f9ab3241615ff",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617610597616,
        "stop" : 1617610597774,
        "duration" : 158
      }
    }, {
      "uid" : "32131e55d727a96f",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617609970367,
        "stop" : 1617609970551,
        "duration" : 184
      }
    }, {
      "uid" : "f4b71c01c75bd281",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617609802408,
        "stop" : 1617609802541,
        "duration" : 133
      }
    }, {
      "uid" : "e40f665d23d2b107",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617609723070,
        "stop" : 1617609723223,
        "duration" : 153
      }
    }, {
      "uid" : "ac0da16d8f1aec30",
      "status" : "broken",
      "statusDetails" : "Exception: 正则未校验到内容！ ['\"ret\": 0']",
      "time" : {
        "start" : 1617609376704,
        "stop" : 1617609376847,
        "duration" : 143
      }
    }, {
      "uid" : "1c291dc5a9df751e",
      "status" : "broken",
      "statusDetails" : "TypeError: a bytes-like object is required, not 'NoneType'",
      "time" : {
        "start" : 1617608243922,
        "stop" : 1617608243930,
        "duration" : 8
      }
    }, {
      "uid" : "f0a3dc9c2441ac87",
      "status" : "broken",
      "statusDetails" : "TypeError: a bytes-like object is required, not 'NoneType'",
      "time" : {
        "start" : 1617608092641,
        "stop" : 1617608092650,
        "duration" : 9
      }
    }, {
      "uid" : "bca14d6384a1c446",
      "status" : "broken",
      "statusDetails" : "TypeError: a bytes-like object is required, not 'NoneType'",
      "time" : {
        "start" : 1617607868685,
        "stop" : 1617607868693,
        "duration" : 8
      }
    }, {
      "uid" : "b5f8e52954492765",
      "status" : "broken",
      "statusDetails" : "TypeError: a bytes-like object is required, not 'NoneType'",
      "time" : {
        "start" : 1617607102656,
        "stop" : 1617607102664,
        "duration" : 8
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "@pytest.mark.skipif(False, reason='该用例的用例等级为：blocker，不在本次运行级别['blocker', 'critical', 'normal', 'minor']内')" ]
  },
  "source" : "f24443ca8950a38.json",
  "parameterValues" : [ "{'test_name': 'configs_1', 'case_id': 1, 'is_run': None, 'info': '我的页配置信息', 'parameter': None, 'cookies': True, 'timeout': 10, 'check': {'expected_result': ['\"ret\": 0'], 'check_type': 'Regular_check', 'expected_code': 200}, 'global_relevance': None, 'relevance': None}" ]
}