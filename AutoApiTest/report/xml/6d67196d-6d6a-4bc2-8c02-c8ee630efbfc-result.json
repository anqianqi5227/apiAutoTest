{"name": "test_case[case_data0]", "status": "broken", "statusDetails": {"message": "AttributeError: 'NoneType' object has no attribute 'replace'", "trace": "self = <test_info.TestPremise object at 0x11f3b2fd0>\ncase_data = {'address': '/mapi/user/info', 'check': {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"corpId\": 43', '\"corpCode\":${uidCode}$']}, 'cookies': True, 'file': False, ...}\nsetupClass = {}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"info\")\n    def test_case(self, case_data, setupClass):\n        self.relevance = setupTest(relevance_path, case_data, setupClass)\n>       api_send_check(case_data, case_dict, case_path, self.relevance)\n\n/Users/nali/AutoApiTest/tests/TestScript/infoApi/test_info.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/nali/AutoApiTest/common/unit/api_send_check.py:33: in api_send_check\n    check_result.check_result(test_name, check_data, code, data, case_path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_name = 'info'\ncase = {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"corpId\": 43', '\"corpCode\":${uidCode}$']}\ncode = 200\ndata = {'data': {'avatar': 'http://imagev2.test.ximalaya.com/storages/6479-audiotest/E8/94/CAoVXrsEKku5AAEkuQAAM3wd.jpg!op_ty...columns=300&rows=300', 'capacity': 1, 'channelName': '45sgg', 'corpCode': 'p1u5Es8yX98', ...}, 'msg': '操作成功', 'ret': 0}\n_path = '/Users/nali/AutoApiTest/tests/TestCases/infoApi', relevance = {}\n\n    def check_result(test_name, case, code, data, _path, relevance=None):\n        \"\"\"\n        校验测试结果\n        :param test_name: 测试名称\n        :param case: 测试用例中check字段，默认为dict\n        :param code: HTTP状态\n        :param data: 返回的接口json数据\n        :param relevance: 关联值对象\n        :param _path: case路径\n        :return:\n        \"\"\"\n        # 不校验结果\n        print(case[\"check_type\"])\n        if case[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n    \n        # json格式校验\n        elif case[\"check_type\"] == 'json':\n            expected_result = case[\"expected_result\"]\n            if isinstance(case[\"expected_result\"], str):\n                expected_result = read_param(test_name, expected_result, _path, relevance)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(expected_result), '期望data')\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if int(code) == case[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                check_json(expected_result, data)\n            else:\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 只校验状态码\n        elif case[\"check_type\"] == 'only_check_status':\n            with allure.step(\"校验HTTP状态\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if code == case[\"expected_code\"]:\n                pass\n            else:\n                print(code)\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 完全校验\n        # elif case[\"check_type\"] == 'entirely_check':\n        #     expected_result = case[\"expected_result\"]\n        #     if isinstance(case[\"expected_result\"], str):\n        #         expected_result = read_json(test_name, expected_result, _path, relevance)\n        #     # with allure.step(\"完全校验结果\"):\n        #     #     allure.attach(\"期望code\", str(case[\"expected_code\"]))\n        #     #     allure.attach('期望data', str(expected_result))\n        #     #     allure.attach(\"实际code\", str(code))\n        #     #     allure.attach('实际data', str(data.yaml))\n        #     if int(code) == case[\"expected_code\"]:\n        #         result = operator.eq(expected_result, data.yaml)\n        #         if result:\n        #             pass\n        #         else:\n        #             raise Exception(\"完全校验失败！ {0} ! = {1}\".format(expected_result, data.yaml))\n        #     else:\n        #         raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 正则校验\n        elif case[\"check_type\"] == 'Regular_check':\n            if int(code) == case[\"expected_code\"]:\n                try:\n                    result = \"\"\n                    if isinstance(case[\"expected_result\"], list):\n                        with allure.step(\"正则校验\"):\n                            for i in case[\"expected_result\"]:\n                                # 替换用例中关联关系\n                                re_i = single_replace(i, relevance)\n>                               result = re.findall(re_i.replace(\"\\\"\", \"\\'\"), str(data))\nE                               AttributeError: 'NoneType' object has no attribute 'replace'\n\n/Users/nali/AutoApiTest/common/unit/check_result.py:105: AttributeError"}, "steps": [{"name": "get请求接口", "status": "passed", "attachments": [{"name": "请求接口：", "source": "9bd86d0e-7975-44ce-bc3e-20ab30ae0324-attachment.attach"}, {"name": "用例描述：", "source": "6f85506f-7def-4dfe-a111-f9295070671e-attachment.attach"}, {"name": "请求地址", "source": "20066c71-92ff-4060-b0b5-ce4030086cdd-attachment.attach"}, {"name": "请求头", "source": "97e30ea2-36e0-464a-8469-246d365b1160-attachment.attach"}, {"name": "请求参数", "source": "ac7c39ca-6875-4780-84a3-1075a6ca7ac6-attachment.attach"}], "start": 1617514277357, "stop": 1617514277359}, {"name": "正则校验", "status": "broken", "statusDetails": {"message": "AttributeError: 'NoneType' object has no attribute 'replace'\n", "trace": "  File \"/Users/nali/AutoApiTest/common/unit/check_result.py\", line 105, in check_result\n    result = re.findall(re_i.replace(\"\\\"\", \"\\'\"), str(data))\n"}, "attachments": [{"name": "正则校验结果\n", "source": "e6cd7c37-5e68-47d2-8bd5-619ad4a2405d-attachment.attach"}], "start": 1617514277840, "stop": 1617514277841}], "attachments": [{"name": "log", "source": "51952894-8c6b-4c4f-aadd-3ecfc35e0425-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "69aec564-ae3d-4d58-82a3-5a6c201a4692-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_data", "value": "{'test_name': 'info', 'info': '个人信息', 'is_run': None, 'host': '${HOST2}$', 'headers': '${headers1}$', 'address': '/mapi/user/info', 'http_type': 'https', 'request_type': 'get', 'parameter_type': None, 'parameter': None, 'cookies': True, 'timeout': 10, 'check': {'expected_result': ['\"corpId\": 43', '\"corpCode\":${uidCode}$'], 'check_type': 'Regular_check', 'expected_code': 200}, 'file': False, 'global_relevance': True, 'relevance': {'uid': 'uid', 'uidCode': 'uidCode'}}"}], "start": 1617514277353, "stop": 1617514277842, "uuid": "a21a079e-4383-492f-b855-f831ce725252", "historyId": "88ff85c5941ab1b201b71956773c97b8", "testCaseId": "21b9860965d3d6bda259e0ba73bbd1e5", "fullName": "tests.TestScript.infoApi.test_info.TestPremise#test_case", "labels": [{"name": "feature", "value": "info"}, {"name": "story", "value": "info"}, {"name": "parentSuite", "value": "tests.TestScript.infoApi"}, {"name": "suite", "value": "test_info"}, {"name": "subSuite", "value": "TestPremise"}, {"name": "host", "value": "anqidediannao.local"}, {"name": "thread", "value": "76267-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.TestScript.infoApi.test_info"}]}