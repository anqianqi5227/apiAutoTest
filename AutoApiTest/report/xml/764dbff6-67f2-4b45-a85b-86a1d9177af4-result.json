{"name": "test_case[case_data0]", "status": "broken", "statusDetails": {"message": "Exception: 正则未校验到内容！ ['\"ret\": 0']", "trace": "self = <test_count.TestCount object at 0x1233d2fd0>\ncase_data = {'address': '/mapi/notice/count', 'check': {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"ret\": 0']}, 'cookies': True, 'file': False, ...}\nsetupClass = {}\n\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"product_version\"] in product_version,\n                        reason=\"该用例所属版本为：{0}，在本次排除版本{1}内\".format(case_dict[\"test_info\"][\"product_version\"],\n                                                                 product_version))\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"case_level\"] not in case_level,\n                        reason=\"该用例的用例等级为：{0}，不在本次运行级别{1}内\".format(case_dict[\"test_info\"][\"case_level\"], case_level))\n    # @pytest.mark.run(order=case_dict[\"test_info\"][\"run_order\"])\n    @allure.severity(case_dict[\"test_info\"][\"case_level\"])\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"count\")\n    def test_case(self, case_data, setupClass):\n        self.relevance = setupTest(relevance_path, case_data, setupClass)\n>       api_send_check(case_data, case_dict, case_path, self.relevance)\n\n/Users/nali/AutoApiTest/tests/TestScript/countApi/test_count.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/nali/AutoApiTest/common/unit/api_send_check.py:33: in api_send_check\n    check_result.check_result(test_name, check_data, code, data, case_path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_name = 'count_1'\ncase = {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"ret\": 0']}\ncode = 200, data = {'data': {}, 'msg': '未登录', 'ret': -10}\n_path = '/Users/nali/AutoApiTest/tests/TestCases/countApi'\nrelevance = {'corpCode': 'p1u5Es8yX98', 'corpId': 43, 'uid': 239283, 'uidCode': '_GAQsTvZuwo'}\n\n    def check_result(test_name, case, code, data, _path, relevance=None):\n        \"\"\"\n        校验测试结果\n        :param test_name: 测试名称\n        :param case: 测试用例中check字段，默认为dict\n        :param code: HTTP状态\n        :param data: 返回的接口json数据\n        :param relevance: 关联值对象\n        :param _path: case路径\n        :return:\n        \"\"\"\n        # 不校验结果\n        print(case[\"check_type\"])\n        if case[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n    \n        # json格式校验\n        elif case[\"check_type\"] == 'json':\n            expected_result = case[\"expected_result\"]\n            if isinstance(case[\"expected_result\"], str):\n                expected_result = read_param(test_name, expected_result, _path, relevance)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(expected_result), '期望data')\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if int(code) == case[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                check_json(expected_result, data)\n            else:\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 只校验状态码\n        elif case[\"check_type\"] == 'only_check_status':\n            with allure.step(\"校验HTTP状态\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if code == case[\"expected_code\"]:\n                pass\n            else:\n                print(code)\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 完全校验\n        # elif case[\"check_type\"] == 'entirely_check':\n        #     expected_result = case[\"expected_result\"]\n        #     if isinstance(case[\"expected_result\"], str):\n        #         expected_result = read_json(test_name, expected_result, _path, relevance)\n        #     # with allure.step(\"完全校验结果\"):\n        #     #     allure.attach(\"期望code\", str(case[\"expected_code\"]))\n        #     #     allure.attach('期望data', str(expected_result))\n        #     #     allure.attach(\"实际code\", str(code))\n        #     #     allure.attach('实际data', str(data.yaml))\n        #     if int(code) == case[\"expected_code\"]:\n        #         result = operator.eq(expected_result, data.yaml)\n        #         if result:\n        #             pass\n        #         else:\n        #             raise Exception(\"完全校验失败！ {0} ! = {1}\".format(expected_result, data.yaml))\n        #     else:\n        #         raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 正则校验\n        elif case[\"check_type\"] == 'Regular_check':\n            if int(code) == case[\"expected_code\"]:\n                try:\n                    result = \"\"\n                    if isinstance(case[\"expected_result\"], list):\n                        with allure.step(\"正则校验\"):\n                            for i in case[\"expected_result\"]:\n                                # 替换用例中关联关系\n                                re_i = single_replace(i, relevance)\n                                result = re.findall(re_i.replace(\"\\\"\", \"\\'\"), str(data))\n                                allure.attach(str(result),'正则校验结果\\n')\n                            allure.attach(str(data),'实际data')\n                    else:\n                        result = re.findall(case[\"expected_result\"].replace(\"\\\"\", \"\\'\"), str(data))\n                        with allure.step(\"正则校验\"):\n                            allure.attach(\"期望code\", str(case[\"expected_code\"]))\n                            allure.attach('正则表达式', str(case[\"expected_result\"]).replace(\"\\'\", \"\\\"\"))\n                            allure.attach(\"实际code\", str(code))\n                            allure.attach('实际data', str(data))\n                            allure.attach(case[\"expected_result\"].replace(\"\\\"\", \"\\'\") + '校验完成结果',\n                                          str(result).replace(\"\\'\", \"\\\"\"))\n                    if not result:\n>                       raise Exception(\"正则未校验到内容！ {}\".format(case[\"expected_result\"]))\nE                       Exception: 正则未校验到内容！ ['\"ret\": 0']\n\n/Users/nali/AutoApiTest/common/unit/check_result.py:118: Exception"}, "steps": [{"name": "get请求接口", "status": "passed", "attachments": [{"name": "请求接口：", "source": "7a62d068-5c42-4406-8530-3b99246699e8-attachment.attach"}, {"name": "用例描述：", "source": "b0bb7ec7-68cf-4608-b7d4-8bff898e081d-attachment.attach"}, {"name": "请求地址", "source": "9ba3eb0a-a866-4f09-be43-ba4cdd4872ae-attachment.attach"}, {"name": "请求头", "source": "30ba6643-15d6-43d4-b9e8-679e4b511c55-attachment.attach"}, {"name": "请求参数", "source": "061ae488-5f31-444f-81ef-30831e5aaf3a-attachment.attach"}], "start": 1617631087865, "stop": 1617631087868}, {"name": "正则校验", "status": "passed", "attachments": [{"name": "正则校验结果\n", "source": "2cad0f44-30ef-479e-837c-b87b3c2850fa-attachment.attach"}, {"name": "实际data", "source": "e2f08062-6927-4bf8-bee0-08c5e2a3f494-attachment.attach"}], "start": 1617631088001, "stop": 1617631088002}], "attachments": [{"name": "log", "source": "f4605b4b-8402-40b1-9c6c-28a2ce4dc2c2-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "97b90862-b136-4cf6-a40d-c556e122e260-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_data", "value": "{'test_name': 'count_1', 'info': '消息', 'is_run': None, 'host': '${HOST2}$', 'headers': '${headers1}$', 'address': '/mapi/notice/count', 'http_type': 'https', 'request_type': 'get', 'parameter_type': None, 'parameter': None, 'cookies': True, 'timeout': 10, 'check': {'expected_result': ['\"ret\": 0'], 'check_type': 'Regular_check', 'expected_code': 200}, 'file': False, 'global_relevance': None, 'relevance': None}"}], "start": 1617631087860, "stop": 1617631088003, "uuid": "f4d0e7da-d53f-45f9-9861-b1b58a49fcd9", "historyId": "8d8000f24415f9ad8863d465c1e37cbd", "testCaseId": "1f1f5d9406181cd24c8add34a3f09879", "fullName": "tests.TestScript.countApi.test_count.TestCount#test_case", "labels": [{"name": "story", "value": "count"}, {"name": "severity", "value": "blocker"}, {"name": "feature", "value": "count"}, {"name": "tag", "value": "@pytest.mark.skipif(False, reason='该用例的用例等级为：blocker，不在本次运行级别['blocker', 'critical', 'normal', 'minor']内')"}, {"name": "parentSuite", "value": "tests.TestScript.countApi"}, {"name": "suite", "value": "test_count"}, {"name": "subSuite", "value": "TestCount"}, {"name": "host", "value": "anqidediannao.local"}, {"name": "thread", "value": "10637-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.TestScript.countApi.test_count"}]}