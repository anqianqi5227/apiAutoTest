{"name": "test_case[login0-case_data0]", "status": "broken", "statusDetails": {"message": "AttributeError: 'NoneType' object has no attribute 'replace'", "trace": "self = <test_homeindex.TestHomeindex object at 0x118a61dd8>\ncase_data = {'case_id': 1, 'check': {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"corpCode\": \"${corpCode}$\"']}, 'cookies': True, 'global_relevance': True, ...}\nsetupClass = {}\n\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"product_version\"] in product_version,\n                        reason=\"该用例所属版本为：{0}，在本次排除版本{1}内\".format(case_dict[\"test_info\"][\"product_version\"],\n                                                                 product_version))\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"case_level\"] not in case_level,\n                        reason=\"该用例的用例等级为：{0}，不在本次运行级别{1}内\".format(case_dict[\"test_info\"][\"case_level\"], case_level))\n    # @pytest.mark.run(order=case_dict[\"test_info\"][\"run_order\"])\n    @allure.severity(case_dict[\"test_info\"][\"case_level\"])\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"homeindex\")\n    def test_case(self, case_data, setupClass):\n        self.relevance = setupTest(relevance_path, case_data, setupClass)\n>       api_send_check(case_data, case_dict, case_path, self.relevance)\n\n/Users/nali/AutoApiTest/tests/TestScript/homeindexApi/test_homeindex.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/nali/AutoApiTest/common/unit/api_send_check.py:35: in api_send_check\n    check_result.check_result(test_name, check_data, code, data, case_path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_name = 'homeindex_1'\ncase = {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"corpCode\": \"${corpCode}$\"']}\ncode = 200\ndata = {'data': {'corpCode': 'p1u5Es8yX98', 'needBindMobile': False, 'pageList': [{'pageId': 256, 'pageSource': 2, 'title': '...: '二轮回归'}, {'pageId': 2, 'pageSource': 1, 'title': '有声图书馆'}], 'shareIntro': '企业在线学习平台呦', ...}, 'msg': '操作成功', 'ret': 0}\n_path = '/Users/nali/AutoApiTest/tests/TestCases/homeindexApi', relevance = {}\n\n    def check_result(test_name, case, code, data, _path, relevance=None):\n        \"\"\"\n        校验测试结果\n        :param test_name: 测试名称\n        :param case: 测试用例中check字段，默认为dict\n        :param code: HTTP状态\n        :param data: 返回的接口json数据\n        :param relevance: 关联值对象\n        :param _path: case路径\n        :return:\n        \"\"\"\n        # 不校验结果\n        print(case[\"check_type\"])\n        if case[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n    \n        # json格式校验\n        elif case[\"check_type\"] == 'json':\n            expected_result = case[\"expected_result\"]\n            if isinstance(case[\"expected_result\"], str):\n                expected_result = read_param(test_name, expected_result, _path, relevance)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(expected_result), '期望data')\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if int(code) == case[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                check_json(expected_result, data)\n            else:\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 只校验状态码\n        elif case[\"check_type\"] == 'only_check_status':\n            with allure.step(\"校验HTTP状态\"):\n                allure.attach(str(case[\"expected_code\"]), \"期望code\")\n                allure.attach(str(code), \"实际code\")\n                allure.attach(str(data), '实际data')\n            if code == case[\"expected_code\"]:\n                pass\n            else:\n                print(code)\n                raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 完全校验\n        # elif case[\"check_type\"] == 'entirely_check':\n        #     expected_result = case[\"expected_result\"]\n        #     if isinstance(case[\"expected_result\"], str):\n        #         expected_result = read_json(test_name, expected_result, _path, relevance)\n        #     # with allure.step(\"完全校验结果\"):\n        #     #     allure.attach(\"期望code\", str(case[\"expected_code\"]))\n        #     #     allure.attach('期望data', str(expected_result))\n        #     #     allure.attach(\"实际code\", str(code))\n        #     #     allure.attach('实际data', str(data.yaml))\n        #     if int(code) == case[\"expected_code\"]:\n        #         result = operator.eq(expected_result, data.yaml)\n        #         if result:\n        #             pass\n        #         else:\n        #             raise Exception(\"完全校验失败！ {0} ! = {1}\".format(expected_result, data.yaml))\n        #     else:\n        #         raise Exception(\"http状态码错误！\\n {0} != {1}\".format(code, case[\"expected_code\"]))\n    \n        # 正则校验\n        elif case[\"check_type\"] == 'Regular_check':\n            if int(code) == case[\"expected_code\"]:\n                try:\n                    result = \"\"\n                    if isinstance(case[\"expected_result\"], list):\n                        print(case[\"expected_result\"])\n                        with allure.step(\"正则校验\"):\n                            for i in case[\"expected_result\"]:\n                                # 替换用例中关联关系\n                                re_i = single_replace(i, relevance)\n>                               result = re.findall(re_i.replace(\"\\\"\", \"\\'\"), str(data))\nE                               AttributeError: 'NoneType' object has no attribute 'replace'\n\n/Users/nali/AutoApiTest/common/unit/check_result.py:106: AttributeError"}, "steps": [{"name": "get请求接口", "status": "passed", "attachments": [{"name": "请求接口：", "source": "b5d3c6cd-8b84-4bab-9475-8fda1486c0ca-attachment.attach"}, {"name": "用例描述：", "source": "f30b5a9a-a981-48a2-b6aa-f5acc5af2054-attachment.attach"}, {"name": "请求地址", "source": "5e013152-417a-4980-889f-3912d074a671-attachment.attach"}, {"name": "请求头", "source": "9a79e80d-ccae-43f7-95b0-dbe3bd368bfa-attachment.attach"}, {"name": "请求参数", "source": "925b6298-4d4d-467f-8a92-5f3cbb85d891-attachment.attach"}], "start": 1617638649753, "stop": 1617638649755}, {"name": "正则校验", "status": "broken", "statusDetails": {"message": "AttributeError: 'NoneType' object has no attribute 'replace'\n", "trace": "  File \"/Users/nali/AutoApiTest/common/unit/check_result.py\", line 106, in check_result\n    result = re.findall(re_i.replace(\"\\\"\", \"\\'\"), str(data))\n"}, "start": 1617638649909, "stop": 1617638649911}], "attachments": [{"name": "log", "source": "ce60ed12-cbd8-403a-a26c-298f3716b614-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "885788f3-ebc0-4c34-914a-1e9b6a634935-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "login", "value": "{'test_name': 'login_h5', 'info': '密码登录m站', 'is_run': None, 'host': '${HOST1}$', 'headers': '${headers1}$', 'address': '/passport/api/pwdLogin', 'http_type': 'https', 'request_type': 'post_cookie', 'parameter_type': 'data', 'parameter': {'passport': 17521200974, 'password': 'anqi666', 'passportType': 1, 'sign': 'F017A0CD674A8B7A4F52B56898D78E6A'}, 'timeout': 10, 'cookies': False, 'check': {'expected_result': None, 'check_type': 'no_check', 'expected_code': None}, 'file': False, 'global_relevance': None, 'relevance': None}"}, {"name": "case_data", "value": "{'test_name': 'homeindex_1', 'case_id': 1, 'is_run': None, 'info': '首页频道列表信息', 'parameter': None, 'cookies': True, 'timeout': 10, 'check': {'expected_result': ['\"corpCode\": \"${corpCode}$\"'], 'check_type': 'Regular_check', 'expected_code': 200}, 'global_relevance': True, 'relevance': {'pageId': 'pageId', 'pageSource': 'pageSource'}}"}], "start": 1617638649751, "stop": 1617638649915, "uuid": "3d6da425-81ee-4ec2-a383-344ebe08c543", "historyId": "60cc82a3d6f307aff0e249d05c31de55", "testCaseId": "83f04cb48611999b913cc30a669d868b", "fullName": "tests.TestScript.homeindexApi.test_homeindex.TestHomeindex#test_case", "labels": [{"name": "severity", "value": "blocker"}, {"name": "story", "value": "homeindex"}, {"name": "feature", "value": "homeindex"}, {"name": "tag", "value": "@pytest.mark.skipif(False, reason='该用例的用例等级为：blocker，不在本次运行级别['blocker', 'critical', 'normal', 'minor']内')"}, {"name": "parentSuite", "value": "tests.TestScript.homeindexApi"}, {"name": "suite", "value": "test_homeindex"}, {"name": "subSuite", "value": "TestHomeindex"}, {"name": "host", "value": "anqidediannao.local"}, {"name": "thread", "value": "20615-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.TestScript.homeindexApi.test_homeindex"}]}