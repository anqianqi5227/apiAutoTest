{"name": "test_case[login0-case_data0]", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <test_page.TestPage object at 0x1163c2278>\ncase_data = {'check': {'check_type': 'Regular_check', 'expected_code': 200, 'expected_result': ['\"pageId\": \"${pageId}$\"']}, 'cookies': True, 'file': False, 'global_relevance': None, ...}\nsetupClass = {}\n\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"product_version\"] in product_version,\n                        reason=\"该用例所属版本为：{0}，在本次排除版本{1}内\".format(case_dict[\"test_info\"][\"product_version\"],\n                                                                 product_version))\n    @pytest.mark.skipif(case_dict[\"test_info\"][\"case_level\"] not in case_level,\n                        reason=\"该用例的用例等级为：{0}，不在本次运行级别{1}内\".format(case_dict[\"test_info\"][\"case_level\"], case_level))\n    # @pytest.mark.run(order=case_dict[\"test_info\"][\"run_order\"])\n    @allure.severity(case_dict[\"test_info\"][\"case_level\"])\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"page\")\n    def test_case(self, case_data, setupClass):\n        self.relevance = setupTest(relevance_path, case_data, setupClass)\n>       api_send_check(case_data, case_dict, case_path, self.relevance)\n\n/Users/nali/AutoApiTest/tests/TestScript/pageApi/test_page.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/nali/AutoApiTest/common/unit/api_send_check.py:26: in api_send_check\n    res = api_send.api_send(case_data, case_dict, case_path, relevance)\n/Users/nali/AutoApiTest/common/unit/api_send.py:125: in api_send\n    cookie=cookie)\n/Users/nali/AutoApiTest/common/unit/api_method.py:75: in get\n    return response.status_code, response.json()\n/Users/nali/anaconda3/lib/python3.7/site-packages/requests/models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\n/Users/nali/anaconda3/lib/python3.7/json/__init__.py:348: in loads\n    return _default_decoder.decode(s)\n/Users/nali/anaconda3/lib/python3.7/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x1075ff630>\ns = '<!DOCTYPE html>\\n<html>\\n<head>\\n  <meta charset=\"utf-8\">\\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\\n ...d>\\n<body>\\n<div class=\"err-wrapper\">\\n  <i class=\"err-img\"></i>\\n      <p>出错啦！请稍后重试</p>\\n  </div>\\n</body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Users/nali/anaconda3/lib/python3.7/json/decoder.py:355: JSONDecodeError"}, "steps": [{"name": "get请求接口", "status": "passed", "attachments": [{"name": "请求接口：", "source": "8189be0f-1071-43ff-9cc6-dab21747deaa-attachment.attach"}, {"name": "用例描述：", "source": "8a81f6a1-1f1d-4949-9a33-66cf691ae290-attachment.attach"}, {"name": "请求地址", "source": "4e567f2b-af59-40d9-96c8-a9b62ce610b0-attachment.attach"}, {"name": "请求头", "source": "61cda860-c08c-4593-99d7-86ff711a4739-attachment.attach"}, {"name": "请求参数", "source": "ede61bde-5458-4801-b96d-0e7549beb624-attachment.attach"}], "start": 1617635947147, "stop": 1617635947150}], "attachments": [{"name": "log", "source": "7582bf2f-8eef-4fcd-b54d-a3367a6213a4-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "a89d44c1-ec61-4bb7-8349-9b2901241228-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "login", "value": "{'test_name': 'login_h5', 'info': '密码登录m站', 'is_run': None, 'host': '${HOST1}$', 'headers': '${headers1}$', 'address': '/passport/api/pwdLogin', 'http_type': 'https', 'request_type': 'post_cookie', 'parameter_type': 'data', 'parameter': {'passport': 17521200974, 'password': 'anqi666', 'passportType': 1, 'sign': 'F017A0CD674A8B7A4F52B56898D78E6A'}, 'timeout': 10, 'cookies': False, 'check': {'expected_result': None, 'check_type': 'no_check', 'expected_code': None}, 'file': False, 'global_relevance': None, 'relevance': None}"}, {"name": "case_data", "value": "{'test_name': 'page_1', 'info': '频道数据', 'is_run': None, 'request_type': 'get', 'parameter_type': 'data', 'parameter': {'pageId': '${pageId}$', 'pageSource': '${pageSource}$'}, 'cookies': True, 'timeout': 10, 'check': {'expected_result': ['\"pageId\": \"${pageId}$\"'], 'check_type': 'Regular_check', 'expected_code': 200}, 'file': False, 'global_relevance': None, 'relevance': None}"}], "start": 1617635947142, "stop": 1617635947361, "uuid": "ea8ad6b0-2eb9-4f25-acd6-9f6589a47fe4", "historyId": "eb334c558b3408a2ad136d8fece96b42", "testCaseId": "872f7fa790f35b7d880324092f6b6e0c", "fullName": "tests.TestScript.pageApi.test_page.TestPage#test_case", "labels": [{"name": "feature", "value": "page"}, {"name": "severity", "value": "blocker"}, {"name": "story", "value": "page"}, {"name": "tag", "value": "@pytest.mark.skipif(False, reason='该用例的用例等级为：blocker，不在本次运行级别['blocker', 'critical', 'normal', 'minor']内')"}, {"name": "parentSuite", "value": "tests.TestScript.pageApi"}, {"name": "suite", "value": "test_page"}, {"name": "subSuite", "value": "TestPage"}, {"name": "host", "value": "anqidediannao.local"}, {"name": "thread", "value": "16674-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.TestScript.pageApi.test_page"}]}